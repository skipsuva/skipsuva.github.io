<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Skip_Skillset.push('Ruby')]]></title>
  <link href="http://skipsuva.github.io/atom.xml" rel="self"/>
  <link href="http://skipsuva.github.io/"/>
  <updated>2016-01-12T07:11:15-05:00</updated>
  <id>http://skipsuva.github.io/</id>
  <author>
    <name><![CDATA[Skip Suva]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL Injections & (Ideally Not) You]]></title>
    <link href="http://skipsuva.github.io/blog/2016/01/01/sql-injections-and-you/"/>
    <updated>2016-01-01T17:34:34-05:00</updated>
    <id>http://skipsuva.github.io/blog/2016/01/01/sql-injections-and-you</id>
    <content type="html"><![CDATA[<p>Before diving headlong into the magic of ActiveRecord, our class spend a few days learning the basics of SQL - practicing basic queries, joins etc. - as well as beginning a much longer discussion around data-driven applications.  A topic that came up briefly piqued my interest: the strangely biological/viral-sounding &lsquo;SQL Injection&rsquo; - a malicious action someone can take against an unprepared database to acquire information, or (sometimes) worse, destroy the data.  We spent much more time discussing the &lsquo;sterilization&rsquo; of code to prevent such vulnerabilities than the actual mechanics of an attack, so I thought it would be worth while to learn more.</p>

<!-- more -->


<p>Essentially all consumer software applications are based on top of databases - they&rsquo;re used to keep track of user accounts, user preferences, user passwords, bank account numbers&hellip;the list goes on.  At the most basic level, the way software interacts with its databases is pretty similar: when information is needed, a query (in one form or another) is sent to the database and the requested information is transmitted back.  Depending on how the software is written, this query can be much more accessible than one might imagine.<br/>
An SQL Injection is a technique that leverages specific syntactic patterns found in SQL interactions with relational databases to gain access to information that would otherwise be unavailable.  Such injections can allow someone to log into other peoples accounts, change or extract data, and even drop entire databases.</p>

<p>There are a few ways to actually perform an injection attack - a common / accessible one being via URL manipulation.  A particularly vulnerable website will expose their dynamic SQL queries as you navigate their site.  You can find common examples of this by googling:</p>

<ul>
<li>inurl:index.php?id=</li>
<li>inurl:buy.php?category=</li>
<li>inurl:article.php?ID=</li>
<li>inurl:play_old.php?id=</li>
<li>inurl:declaration_more.php?decl_id=</li>
<li>inurl:pageid=</li>
</ul>


<p>While not every site returned is definitely vulnerable, testing each is as easy as navigating to the page and entering an apostrophe after the url ( *<a href="http://www.example.com/index.php?catid=1%E2%80%99*">http://www.example.com/index.php?catid=1%E2%80%99*</a> ).  If a site isn&rsquo;t well protectected, you&rsquo;ll see an SQL error on the page.</p>

<p><img align="clear" src="http://s14.postimg.org/g45yf6m35/Screen_Shot_2016_01_12_at_6_52_02_AM.png" width="600"/></p>

<p>Using this information, someone with enough knowledge (and time on their hands) could determine the structure of the site&rsquo;s database tables and construct queries to extract information and data.</p>

<p>Let&rsquo;s look at a (very simple) different example:  Your favorite social media website Facetagram asks you for your username and password in order to authenticate you and allow you to access/view your posts and friends.  It&rsquo;s quite possible that these two fields (username and password) are wired to the &ldquo;Users&rdquo; table of the Facetagram relational database, which means when you plug your credentials in and hit &lsquo;enter,&rsquo; the SQL query sent might look like something similar to this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uName = getRequestString("UserName");
</span><span class='line'>uPass = getRequestString("UserPass");
</span><span class='line'>
</span><span class='line'>sql = "SELECT * FROM Users WHERE Name ='" + uName + "' AND Pass ='" + uPass + "'"</span></code></pre></td></tr></table></div></figure>


<p>As you can see, the user&rsquo;s entries are assigned to variables which are then directly used in the query to access the user&rsquo;s data.  Seeing these mechanics, someone without much SQL experience could reasonably believe that the data is safe because a user must enter in the correct password - we&rsquo;ve all had to re-enter our credentials when we have a type logging into a site!  However, this is not necessarily true (at least in this elementary example).</p>

<p><img align="clear" src="http://danieldafoe.com/res/sticker-sql-injection.png" width="500"/></p>

<p>In the example outlined above, a savvy individual could enter <code>" or "" = "</code> into the username/password entry fields, which would create the following valid SQL query:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SELECT * FROM Users WHERE Name ="" or "" = "" AND Pass ="" or ""=""</span></code></pre></td></tr></table></div></figure>


<p>Because <code>WHERE "" = ""</code> always evaluates as true, this SQL injection would return all rows of the Users table to the hacker, exposing the information of potentially thousands of users.</p>

<p>This is pretty scary stuff, given how easily (again, in this elementary example) this can be executed.  However, developers can protect their code&hellip;and their databases.  Using a technique called sterilization, the susceptible syntax can be substituted in the query with question marks (or other symbols, I believe) and the user-entered variables are called on at the time of execution.  By passing the user entries in as such, SQL does some behind the scenes magic, encapsulating the entry into a sting, ensuring no special characters are able to affect the query&hellip;like ones that were used above.  Using this method, the code example from above could be refactored into:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uName = getRequestString("UserName");
</span><span class='line'>uPass = getRequestString("UserPass");
</span><span class='line'>
</span><span class='line'>sql = "SELECT * FROM Users WHERE Name ='" + ? + "' AND Pass ='" + ? + "'"
</span><span class='line'>
</span><span class='line'>db.Execute(sql, uName, uPass)</span></code></pre></td></tr></table></div></figure>


<p>If our hacker tried the same SQL injection now, their entry would be rejected by the system because after sterilization it would look like this: <code>" "" or ""=" "</code></p>

<p>Despite being preventable, SQL Injection attacks against large companies are very common.  Companies such as VTech, TalkTalk, Planned Parenthood, MySQL Servers, and University of Sydney are just a handful of those hit&hellip;in 2015 alone.  In the past 4 years, the likes of Yahoo, LinkedIn, Adobe, and LivingSocial have met similar fates, exposing hundreds of thousands of user accounts and passwords.  A more comprehensive list (with associated hack details) can be found <a href="http://codecurmudgeon.com/wp/sql-injection-hall-of-shame/">here</a>.</p>

<p>More information on identfifying vulnerable websites and google dorking can be found <a href="https://blog.udemy.com/sql-injection-tutorial/">here</a>.  For more information about preventing SQL injection attacks, check out<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet"> OWASP&rsquo;s website</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Singleton Classes: The Class' Mysterious, Estranged Uncle]]></title>
    <link href="http://skipsuva.github.io/blog/2015/12/15/singleton-methods-and-classes/"/>
    <updated>2015-12-15T06:34:53-05:00</updated>
    <id>http://skipsuva.github.io/blog/2015/12/15/singleton-methods-and-classes</id>
    <content type="html"><![CDATA[<p>As we continue to climb further down the rabbit hole that is object oriented programming, the sheer magnitude of my ignorance is becoming more clear everyday - and I have a feeling I should start getting comfortable existing in this state of &ldquo;conscious incompetence&rdquo; for a while.  One thing I continue to find myself uncomfortable with is separate class object interactions - the thought of doing another &ldquo;Artist-Song-Genre&rdquo; lab makes me dry-heave.  As such, I thought it would be a good exercise to try and dig into a related topic and work to better understand class interactions.</p>

<!-- more -->


<p>We&rsquo;ve seen the use of <strong>singleton methods</strong> before, and on the surface they look pretty straightforward - you simply define a particular method directly on the desired object, after which <em>only</em> that object can have that method called on it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">actor</span> <span class="o">=</span> <span class="s2">&quot;Leonardo DiCaprio&quot;</span>
</span><span class='line'><span class="k">def</span> <span class="nc">actor</span><span class="o">.</span><span class="nf">oscar</span>
</span><span class='line'>  <span class="nb">self</span> <span class="o">+</span> <span class="s2">&quot; will never win an Oscar&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">actor</span><span class="o">.</span><span class="n">oscar</span>                       <span class="c1">#==&gt; &quot;Leonardo DiCaprio will never win an Oscar&quot;</span>
</span><span class='line'><span class="s2">&quot;Matthew McConaughey&quot;</span><span class="o">.</span><span class="n">oscar</span>  <span class="c1">#==&gt; NoMethodError: undefined method `oscar&#39; for &quot;Matthew McConaughey&quot;:String</span>
</span></code></pre></td></tr></table></div></figure>


<p>
Makes sense, right?  Visually, you can see what&rsquo;s going on.  Take a moment and consider something we&rsquo;ve discussed a number of times in class - the concept of abstraction in our code.  The strategy above, while legitimate, is about as literal as we could have made it.  You may not be surprised to learn that Ruby has an answer for us - and it is related to <em>where</em> a singleton method actually lives.</p>

<p>It is here we are introduced to a shadow-like, creepy, estranged-uncle class.  At instanciation, every object is actually born with <em>two</em> classes - the class that it is an instance in, and its singleton class.  At the time of their creation, they have no name, and are effectively anonymous until explicitly called upon.  David A. Black, of the &ldquo;Well Grounded Rubyist,&rdquo; has a slightly less sinister-sounding explanation:</p>

<blockquote><p><em>You can think of an object’s singleton class as an exclusive stash of methods, tailor-made for that object and not shared with other objects—not even with other instances of the object’s class.</em>
- David A. Black</p></blockquote>

<p>The next questions to explore are when and how we as programmers should be interacting with our objects' singleton classes.  Imagine you have an object - an instance of a particular class that you know you want to act in unique ways - creating a whole collection of singleton methods for this class instance would look terribly messy and as mentioned before, wouldn&rsquo;t be very abstract - if your program had to change down the road, you&rsquo;d have to make sure you changed the object keyword on every single one.</p>

<p>Ruby, of course, has an elegant and efficient solution for this problem. The singleton class for a particular object can be defined for multiple methods using the following syntax:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">lunchtime</span>
</span><span class='line'>    <span class="s2">&quot;I eat hamburgers for lunch.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">chad</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">roger</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">chad</span><span class="o">.</span><span class="n">lunchtime</span>     <span class="c1">#==&gt; &quot;I eat hamburgers for lunch.&quot;</span>
</span><span class='line'><span class="n">roger</span><span class="o">.</span><span class="n">lunchtime</span>    <span class="c1">#==&gt; &quot;I eat hamburgers for lunch.&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="n">roger</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">lunchtime</span>
</span><span class='line'>    <span class="s2">&quot;I eat hay for lunch.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bedtime</span>
</span><span class='line'>    <span class="s2">&quot;I sleep in a stable.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">confession</span>
</span><span class='line'>    <span class="s2">&quot;I&#39;m actually a horse.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">chad</span><span class="o">.</span><span class="n">lunchtime</span>     <span class="c1">#==&gt; &quot;I eat hamburgers for lunch.&quot;</span>
</span><span class='line'><span class="n">roger</span><span class="o">.</span><span class="n">lunchtime</span>    <span class="c1">#==&gt; &quot;I eat hay for lunch.&quot;</span>
</span><span class='line'><span class="n">chad</span><span class="o">.</span><span class="n">bedtime</span>       <span class="c1">#==&gt; NoMethodError: undefined method `bedtime&#39; for #&lt;Person:0x007fa98a1fdfe8&gt;</span>
</span><span class='line'><span class="n">roger</span><span class="o">.</span><span class="n">bedtime</span>      <span class="c1">#==&gt; &quot;I sleep in a stable.&quot;</span>
</span><span class='line'><span class="n">roger</span><span class="o">.</span><span class="n">confession</span>   <span class="c1">#==&gt; &quot;I&#39;m actually a horse.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, by using the singleton class assignment notation to &lsquo;require&rsquo; it, we&rsquo;re able to bring Roger&rsquo;s singleton class and its associated behaviors out of the shadows in an efficient way.</p>

<p>A frequent use of this concept and syntax in Ruby programming involves streamlining something we already have some experience with - defining class-specific methods.  Up until this point, we&rsquo;ve assigned class methods in a very similar way to that of singleton methods:</p>

<p><code>def self.all; end</code> or <code>def self.most_expensive; end</code></p>

<p>This works, but by incorporating the syntax we just learned, we can streamline class method assignment by relying on its singleton class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Artist</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">all</span>
</span><span class='line'>      <span class="vc">@@all</span> <span class="o">|</span> <span class="o">|=</span> <span class="o">[</span> <span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="n">artist_name</span><span class="p">)</span>
</span><span class='line'>      <span class="n">new_artist</span> <span class="o">=</span> <span class="no">Artist</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">artist_name</span><span class="p">)</span>
</span><span class='line'>      <span class="n">new_artist</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">new_artist</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">destroy_all</span>
</span><span class='line'>      <span class="n">all</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1"># begin regular class methods</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_song</span><span class="p">(</span><span class="n">song</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="o">.</span> <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, because we&rsquo;re assigning the Artist&rsquo;s singleton class inside the body of the class, we&rsquo;re able to utilize &lsquo;self, &rsquo; and save ourselves some typing and potentially unorganized code.  <code>class &lt;&lt; self</code> inside the body is equivalent to <code>class &lt;&lt; Artist</code> outside the body.</p>

<p><img style="margin-right: 2em" align="left"  src="http://s10.postimg.org/lr45byvcp/Screen_Shot_2015_12_16_at_7_02_08_AM.png" width="300"/></p>

<p>The last thing we&rsquo;ll look at is, which is likely obvious at this point, is how singleton classes fit into the method lookup chain:</p>

<p>As you can see to the left, the object (an instance of class D) first checks its singleton class for the method in question before any modules or its parent class.  From here, the list of possible uses goes on - you are able to even able to incorporate modules in your singleton classes for further class instance customization&hellip;but we&rsquo;ll leave that for another day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Scraping & Hacker News]]></title>
    <link href="http://skipsuva.github.io/blog/2015/12/11/hacker-new-must-read/"/>
    <updated>2015-12-11T06:53:51-05:00</updated>
    <id>http://skipsuva.github.io/blog/2015/12/11/hacker-new-must-read</id>
    <content type="html"><![CDATA[<p>After covering basic web scraping in class, I thought it would be fun to get some additional practice scraping a live website and to create a simple, useful app with the result.  The premise is pretty straightforward, but offers a feature not easily gleaned from simply visiting the <a href="https://news.ycombinator.com/">Hacker News</a> website - the program compares <em>both</em> each article&rsquo;s Reddit-style point count with the quantity of comments.  After identifying that article, it launches the webpage automatically from the console.  See below for a repository link to &lsquo;Must Read Hacker News.&rsquo;</p>

<!-- more -->


<p>Utilizing the <a href="https://rubygems.org/gems/nokogiri/versions/1.6.7">Nokogiri gem</a>, I parse 4 pages of Hacker News, identifying the necessary css selectors and assigning to an array of hashes.  From there, it&rsquo;s a simple each loop in the &lsquo;calculator&rsquo; method to identify the one article with the highest point score and highest comment count.</p>

<p>The main challenge I ran into was identifying a way to navigate the structure of the website - articles on Hacker News are arranged in a non-nested table, meaning getting from title/link to point count and comments wasn&rsquo;t as easy as I had anticipated.  Shown below is a visualization of what I mean - the table row that holds the subtext is not nested in the title table row, instead it is just the next <tr>.</p>

<p><img align="clear" src="http://s12.postimg.org/7t4f9xg6l/Screen_Shot_2015_12_11_at_8_29_48_AM.png" width="500"/></p>

<p>I got some excellent pointers from <a href="http://flats.github.io/">Dave Flaherty</a> on how to do just that, utilizing the &lsquo;.parent&rsquo; Nokogiri module method.  See the scraper method below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">page_scraper</span>
</span><span class='line'>    <span class="vi">@reading_list</span> <span class="o">=</span> <span class="o">[</span> <span class="o">]</span>
</span><span class='line'>    <span class="vi">@url_list</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span>
</span><span class='line'>        <span class="n">html</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
</span><span class='line'>        <span class="n">doc</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">HTML</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
</span><span class='line'>        <span class="n">titles</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s2">&quot;.title &gt; a&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">score</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>        <span class="n">comment_num</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>        <span class="n">titles</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">title_data</span><span class="o">|</span>
</span><span class='line'>            <span class="n">title</span> <span class="o">=</span> <span class="n">title_data</span><span class="o">.</span><span class="n">text</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="o">]</span>
</span><span class='line'>            <span class="n">url</span> <span class="o">=</span> <span class="n">title_data</span><span class="o">.</span><span class="n">attribute</span><span class="p">(</span><span class="s2">&quot;href&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">value</span>
</span><span class='line'>            <span class="n">subtexts</span> <span class="o">=</span> <span class="n">title_data</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">next</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s2">&quot;.subtext&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="n">subtexts</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">subtext_line</span><span class="o">|</span>
</span><span class='line'>                <span class="n">score</span> <span class="o">=</span> <span class="n">subtext_line</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;.score&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot; points&quot;</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>                <span class="n">comment_num</span> <span class="o">=</span> <span class="n">subtext_line</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\d+ comments/</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/[0-9]+/</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>          <span class="vi">@reading_list</span> <span class="o">&lt;&lt;</span> <span class="p">{</span><span class="ss">article_title</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span> <span class="ss">link</span><span class="p">:</span> <span class="n">url</span><span class="p">,</span> <span class="ss">points</span><span class="p">:</span> <span class="n">score</span><span class="p">,</span> <span class="ss">comments</span><span class="p">:</span> <span class="n">comment_num</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<hr />

<p>Future improvements could include:<br/>
- Building out an interactive CLI app that allows for user engagement (e.g. &ldquo;how many pages would you like to parse?&rdquo;, &ldquo;Would you like to see the article with the most points/comments/both?&rdquo;, etc.).<br/>
- Investigating the use of Hacker News' API to allow for more robust information usage.<br/>
- Integrating other relevant news sites (e.g. top Reddit post, top io9 article, etc).</p>

<p>For the curious, you can find the repo here: <a href="https://github.com/skipsuva/must-read-hacker-news">Must Read Hacker News</a>.  Feedback and suggestions are welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Peek into the Black Magic that is RegEx]]></title>
    <link href="http://skipsuva.github.io/blog/2015/12/09/regex-black-magic/"/>
    <updated>2015-12-09T14:55:49-05:00</updated>
    <id>http://skipsuva.github.io/blog/2015/12/09/regex-black-magic</id>
    <content type="html"><![CDATA[<p>Interestingly enough, the first topic of my ruby blog isn&rsquo;t explicitly limited to the ruby language. Regular Expressions, or RegEx, are something I had seen used in ruby documentation and StackOverflow posts for months, but because its cryptic presentation felt so unapproachable to my young and impressionable eyes, I never investigated further.  Sure, I copied and pasted some examples to use for string substitutions, but I certainly didn&rsquo;t understand what on earth I was telling my method to actually do.  Since then, the tune of my song has changed - after a brief explanation by a classmate, I realized that RegEx is an extremely powerful and endlessly useful tool to  master, one that our instructor (only somewhat) jokingly compares to black magic.</p>

<!-- more -->


<h3><code>/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/</code></h3>

<p><em>A valid regular expression used to match a standard email address</em></p>

<p>In short, a regular expression is a sequence characters that can be used to describe a search pattern for text in a string.  Correct usage of RegEx can create powerful search parameters in a single line of code.  As such, there are a handful of common uses, from character replacement or subbing, list parsing and splitting, to ensuring proper text/user entry formatting in programs or web applications.</p>

<p>Regular expressions came about in the 1950s and were commonly used with Unix text processing.  Since then, they have been used by a bevy of other programming languages: C, C++, Perl, PHP, Java, .NET, Ruby, Python, etc.  While the specific uses of RegEx within each language may differ in use and implementation, my impression is that the core concepts are the same.</p>

<hr />

<p>This post is meant by <strong>no means</strong> to be a comprehensive tutorial - I merely want to provide a helpful jumping-off point for interested readers.  As such, I’ve provided a handful of helpful resources and RegEx practice environments linked below.  I do, however, want to also introduce a few basic selectors that, once understood, will help begin lifting the fog for a beginner.</p>

<hr />

<h3><code>/abc/</code> vs <code>/[abc]/</code></h3>

<p><img align="clear" src="http://s3.postimg.org/i4j5lf9kj/abc.png" width="250"/>
<img align="clear" src="http://s3.postimg.org/chmsny71v/abc_brack.png" width="246"/></p>

<p>The first example highlights basic RegEx selector syntax.  In the example above, we can see that surrounding text with brackets grants the ability to select any of the listed characters, rather than an explicit pattern.  Doing so, you are able to link together multiple character selectors.</p>

<h3><code>[a-z]</code></h3>

<p><img align="clear" src="http://s3.postimg.org/k6f1lxi5v/range.png" width="250"/></p>

<p>Utilizing this bracketing strategy, we&rsquo;re able to select characters that fall within a certain range regardless of positioning - this format also works for digits.</p>

<h3><code>/\d/</code> vs <code>/\D/</code>  &amp; <code>/\w/</code> vs <code>/\W/</code></h3>

<p><img align="clear" src="http://s3.postimg.org/7gfemkzlf/digits.png" width="250"/>
<img align="clear" src="http://s3.postimg.org/4wf6eqmnn/nondigits.png" width="250"/></p>

<p><img align="clear" src="http://s3.postimg.org/c8kmka4vn/alphanum.png" width="250"/>
<img align="clear" src="http://s3.postimg.org/3rl49d06r/nonalpha.png" width="250"/></p>

<p>In the first you see the <code>/\d/</code> and <code>/\D/</code> selectors which target digits and non-digits, respectively.  Next is the <code>/\w/</code>  which allows the targeting of <strong>all</strong> alphanumeric characters, and <code>/\W/</code> which targets non-alphanumeric characters.</p>

<h3><code>/[,\s.]/</code></h3>

<p><img align="clear" src="http://s3.postimg.org/hmjertulv/special.png" width="250"/></p>

<p>Here we are using specific special characters, specifically ‘,\s.’ which allows the selection of white spaces, commas and periods.  There are other special-symbol-specific selectors available as well.</p>

<hr />

<p>As you can likely imagine, the use of regular expressions could get pretty complex, and my understanding and usage of the topic has really only begun. As promised, you can find some excellent resources below to explore regular expressions further.</p>

<p><a href="http://regexone.com/">RegexOne</a>: Excellent interactive introductory tutorial on regular expressions.<br/>
<a href="http://regexr.com/">RegExr</a>: Useful tool to practice regular expressions with custom text.<br/>
<a href="http://rubular.com/">Rubular</a>: Another tool to practice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Initialize]]></title>
    <link href="http://skipsuva.github.io/blog/2015/12/09/first-post/"/>
    <updated>2015-12-09T14:48:39-05:00</updated>
    <id>http://skipsuva.github.io/blog/2015/12/09/first-post</id>
    <content type="html"><![CDATA[<p>Welcome to the technical Blog of Skip Suva.  Over (at least) the next three months, I will be adding posts periodically and writing about topics that interest, confuse, and frustrate me - with the hope that doing so will not only enlighten a reader or two, but also ensure I master that domain.</p>
]]></content>
  </entry>
  
</feed>
