<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Skip_Skillset.push('Ruby')]]></title>
  <link href="http://skipsuva.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://skipsuva.github.io/"/>
  <updated>2016-03-08T12:49:43-05:00</updated>
  <id>http://skipsuva.github.io/</id>
  <author>
    <name><![CDATA[Skip Suva]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building in rails, or: How partials saved my life]]></title>
    <link href="http://skipsuva.github.io/blog/2016/03/01/partials-saved-my-life/"/>
    <updated>2016-03-01T16:04:17-05:00</updated>
    <id>http://skipsuva.github.io/blog/2016/03/01/partials-saved-my-life</id>
    <content type="html"><![CDATA[<p>While kicking off our project, <a href="https://gettogethr.herokuapp.com">gettogethr</a> at the Flatiron School, my group and I quickly aligned on the fact that the best design approach for our idea would be that of a single page web app.  Keeping user experience in mind, we wanted gettogethr to be easy and quick to use, not forcing our users to make unnecessary navigations.  As new developers, this proved a challenge, forcing us to dig deep into elements we had touched on in class, and utilize other we had only glazed over.  Not only did we need to bring responsive design to nearly every element of the main user page, but we needed a codebase where three guys could work on the &lsquo;one page&rsquo; concurrently.  In the end, we successfully accomplished our goal with hefty use of jQuery and AJAX, as well as the decision early on to partial-ize the living christ out of our main index page.</p>

<!-- more -->


<p>Coming into this project, I had a pretty good understanding of how partials in rails worked and the basic benefits of them: I recognized that the use thereof could clean your code up by separating concerns out, and allow for some cool code reuse.  When developing gettogethr, my groupmates and I initially approached our &lsquo;partialization&rsquo; task with the former in mind - we all needed to be able to work on different aspects of the main user page, and by simply breaking the sections into partials we could save ourselves approximately over 9,000 merge conflicts.  However, as we coded on, we were able to find some neat ways to utilize partials that really leveled up my understanding of the concept and practice.</p>

<p><em>While I will not be covering the basics of partials explicitly in this post, I absolutely recommend checking out the resources listed at the bottom of the page.</em></p>

<p>Shown below is the page that a gettogethr user would spend most of their time - it has all of the relevant gathering information on it.  I&rsquo;ve tried to highlight the distinct partials with colored boxes to illustrate the varying degrees of complexity and nesting we ended up using.  We&rsquo;ll look at a few examples, beginning with a typical partial use, and then move on to the more interesting dynamic ones we created.</p>

<p><img align="clear" src="http://s12.postimg.org/uuckafcct/gettogethr.jpg" width="700"/></p>

<p><strong>Collaborators</strong><br/>
In this use case, the goal was to display the names of the people invited, as well as the form to invite more.</p>

<p>```html</p>

<!-- views/gatherings/show.html.erb -->


<div class="row" id="collaborators-row">
    <div id="collaborators-panel" class="col-md-12">
      <div id="collaborators">
        <%= render "collaborators_section" %>
      </div>
    </div>
  </div>


<pre><code>This is the most simple partial usage - simply using erb to render the partial by name, not passing any information in.
</code></pre>

<!-- views/gatherings/_collaborators_section.html.erb -->


<h6 class="collaborators-label">The people involved are</h6>


<div id="collaborator-list">
   <%= render partial: "collaborator", collection: @collaborators %>
</div>




<div id="add-collabs">
  <h6 class="invite-label">Invite people:</h6>
  <%= form_tag("/gatherings/#{@gathering.id}/add-users", remote: true, id: 'add-collaborator-form') do %>
    <%= text_field( :user, :id, options = { class: "form-control autocomplete ac-input", placeholder: 'Name or email address' }) %>
    <%= hidden_field(:user, :id) %>
    <%= submit_tag "Add People", { class:"btn btn-primary" } %>
  <% end %>
</div>




<div id="email-notification-form">
  <%= link_to "Send Everyone an Email Notification", "/gatherings/#{@gathering.id}/mail-users", remote: true, method: :post %>
</div>


<pre><code>Here, we're calling a specific partial with a collection to be used, saving us the need to code an iteration block.  *The `@collaborators` instance variable was defined in the gatherings controller.*
</code></pre>

<!-- views/gatherings/_collaborator.html.erb -->


<div id="collaborator-<%=collaborator.id%>" class="collaborator-btn btn btn-trans <%= (collaborator == current_user ? "btn-danger" : "btn-primary") %>  <%='collaborator-not-notified' if !collaborator.notified_recently?(@gathering)%>">
  <span style="display:inline-block"  class="collaborator">
  <%= collaborator.name %>
  </span>
  <span style="display:inline-block" class="collaborator-delete">

    <%= link_to(raw("<i class='fa fa-times collaborator-delete-icon'></i>"),
    {action:"remove_users", user:collaborator.id}, method: :post, remote: (collaborator == current_user ? false : true), style:"display:inline-block" )%>
  </span>
</div>


<pre><code>This partial has the user specific information we need to be able to view and remove them from the gathering.  Using the collection rendering method from above, we gain access to the singular variable (e.g. collaborator from `@collaborators`).


**Voting**  
Here we begin already two nested partials in - inside the specific item cards (seen in the activities/places sections).  The main goal here was to, utilizing the polymophic associations of our Vote model, create a way to code dynamic and flexible voting buttons that would only be associated with the item of the card they are on.
</code></pre>

<!-- views/activities/_activity.html.erb -->


<div class="item-col col-md-3">
  <div class="activity-box panel panel-solid-default" id="activity-<%= activity.id %>">
    <div class="item panel-heading">
        <h3 class="panel-title"><%= activity.description %></h3>
      <div class="actions pull-right">
        <i class="fa fa-chevron-up"></i>
      </div>
    </div>

    <div class="panel-body">
      <p>
        <%= activity.user.name %> suggests:<br>
        <%= activity.description %> (<%= activity.activity_category.label %>)
      </p>
      <%= button_to "X", gathering_activity_path(@gathering, activity), method: :delete, remote: true, class: 'btn btn-xs', style:"display:inline-block;" %>
    </div>

    <div class="panel-footer">
      <%= render partial: '/votes/form', locals:{votable:activity, gathering:@gathering} %>
    </div>
  </div>
</div>


<pre><code>The ultimate goal here is to be able to link a vote with a specific "votable" (activity, place, time), we utilize the "locals" syntax to pass in locally available variables to the partial.
</code></pre>

<!-- views/votes/_form.html.erb -->


<div class="votebox">
   <% [1,0,-1].each do |thumbage| %>
    <%= render partial:'votes/vote_button', locals:{thumbage: thumbage, gathering: gathering, votable: votable} %>
   <% end %>
</div>


<pre><code>Here, for each vote type (thumbs up, shrug, thumbs down) we follow the same strategy, passing in the "thumbage", gathering and votable to be used by each vote button.
</code></pre>

<!-- views/votes/_vote_button.html.erb -->


<div data-toggle="tooltip" data-placement="bottom" title="<%= users_for_votable_vote(votable, thumbage).join(", ")%>">
  <%= form_tag({controller:"votes", :action => 'submit', thumbage:thumbage,  gathering_id:gathering.id, votable_id:votable.id, votable_class:votable.class.to_s}, {method: :post, remote: true}) do%>
    <%= button_tag(type: 'submit', class: "btn btn-primary btn-xs #{class_mapping(thumbage)} #{voted_class if current_vote(votable).try(:value) == thumbage}" ) do %>
     <i class="fa <%=icon_mapping(thumbage)%>"></i>
     <span class="vote-count"><%= vote_count(votable,thumbage)%></span>
    <% end %>
  <% end %>
</div>


<p>```
Finally, here, when a user clicks a vote button, it will have all the neccessary information it needs to be able to send the AJAX call to the controller to log the vote.</p>

<p>Whew!  As I mentioned before, going through this process was a fantastic learning experience, and deepened my understanding of how to best use partials in a rails app - single page or not.</p>

<p><strong>Resources:</strong></p>

<ul>
<li><a href="http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials">Rails Guides</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActionView/PartialRenderer.html">Rails ActionView API Docs</a></li>
<li><a href="https://robots.thoughtbot.com/rendering-collections-in-rails">ThoughtBot Blog</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Janky Javascript...]]></title>
    <link href="http://skipsuva.github.io/blog/2016/02/09/janky-dot-js/"/>
    <updated>2016-02-09T19:34:38-05:00</updated>
    <id>http://skipsuva.github.io/blog/2016/02/09/janky-dot-js</id>
    <content type="html"><![CDATA[<p>While working on our recent project, <a href="https://gettogethr.herokuapp.com">gettogethr</a>, our team saw a number of opportunities to make the user experience feel much quicker and more customizable.  Of course, in order to see these through, we knew we&rsquo;d need to call upon our new friend Javascript and her metal-armed brother (A)<a href="http://vignette2.wikia.nocookie.net/mortalkombat/images/2/2e/Jax_MK3_ver.png/revision/latest?cb=20110416103234&amp;path-prefix=ru">JAX</a>.</p>

<!-- more -->


<p><img src="http://i.imgur.com/VTLzZB1.gif" alt="" /></p>

<p>A la Google Docs, we wanted to provide the ability to change the title of a shared event on the fly, ensuring the name change persists in the database and upon page reload.</p>

<p>The first step to achieve this effect was to build a jQuery double-click listener on the title element which is initiated upon page load.  When activated, a text box input is created with some attributes (in order to show the old/exisiting title) and replaces the title html element on the page.</p>

<pre><code class="javascript">Gathering.prototype.addTitleListener = function( ) {
  this.$gatheringTitle.dblclick(function( ) {
    var oldTitle = this.$gatheringTitle.text( );
    var textbox = document.createElement('input');
    textbox.type = 'text';
    textbox.id = 'title';
    textbox.value = oldTitle;
    this.$gatheringTitle.html(textbox);
    $('#title').on('keypress', titleKeypressListener.bind(this) );
  }.bind(this) );
};
</code></pre>

<p>Next, we assign a jQuery listener to the keypresses on that newly created input box (&lsquo;#title&rsquo;).  When the <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">enter key is hit</a> (e.keyCode === 13), the current value of the text box and the id of the current event (captured via an identifying id) are assigned to variables to be used in an AJAX call to our gatherings controller.</p>

<pre><code class="javascript">var titleKeypressListener = function(e) {
  if(e.keyCode === 13) {
    var title = $('#title').val( );
    var URL =  this.gatheringId;
    $.ajax({
      method: 'patch',
      url: URL,
      dataType: 'script',
      data: {
        gathering: {
          id: this.gatheringId,
          title: title
        }},
      success: function( ){
        this.$gatheringTitle.html($('#title').val( ));
      }.bind(this)
    });
  }
};
</code></pre>

<p>This AJAX call sends the newly entered title, via patch request, to our controller.  There, we identify the correct gathering via the established params, and update the object with our new title (gathering_params).  Finally, upon success, we replace the text input element with the new title.</p>

<pre><code class="ruby">def update
  @gathering = Gathering.find(params [ :id ] )
  respond_to do | format |
    if @gathering.update(gathering_params)
        ....
      format.js { head 204 }
        ....
    end
  end
end
</code></pre>

<p>From here, we could changing the title as many times as you want because the double click listener is still active.</p>

<p><strong>Resources:</strong></p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">Mozilla Developer Network</a> on (deprecated) use of keyCodes</li>
<li><a href="https://jquery.com/">jQuery Documentation</a> for all the things</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Singleton Classes: The Class' Mysterious, Estranged Uncle]]></title>
    <link href="http://skipsuva.github.io/blog/2015/12/15/singleton-methods-and-classes/"/>
    <updated>2015-12-15T06:34:53-05:00</updated>
    <id>http://skipsuva.github.io/blog/2015/12/15/singleton-methods-and-classes</id>
    <content type="html"><![CDATA[<p>As we continue to climb further down the rabbit hole that is object oriented programming, the sheer magnitude of my ignorance is becoming more clear everyday - and I have a feeling I should start getting comfortable existing in this state of &ldquo;conscious incompetence&rdquo; for a while.  One thing I continue to find myself uncomfortable with is separate class object interactions - the thought of doing another &ldquo;Artist-Song-Genre&rdquo; lab makes me dry-heave.  As such, I thought it would be a good exercise to try and dig into a related topic and work to better understand class interactions.</p>

<!-- more -->


<p>We&rsquo;ve seen the use of <strong>singleton methods</strong> before, and on the surface they look pretty straightforward - you simply define a particular method directly on the desired object, after which <em>only</em> that object can have that method called on it:<br/>
<code>ruby
actor = "Leonardo DiCaprio"
def actor.oscar
  self + " will never win an Oscar"
end
actor.oscar                       #==&gt; "Leonardo DiCaprio will never win an Oscar"
"Matthew McConaughey".oscar  #==&gt; NoMethodError: undefined method `oscar' for "Matthew McConaughey":String
</code><br/>
Makes sense, right?  Visually, you can see what&rsquo;s going on.  Take a moment and consider something we&rsquo;ve discussed a number of times in class - the concept of abstraction in our code.  The strategy above, while legitimate, is about as literal as we could have made it.  You may not be surprised to learn that Ruby has an answer for us - and it is related to <em>where</em> a singleton method actually lives.</p>

<p>It is here we are introduced to a shadow-like, creepy, estranged-uncle class.  At instanciation, every object is actually born with <em>two</em> classes - the class that it is an instance in, and its singleton class.  At the time of their creation, they have no name, and are effectively anonymous until explicitly called upon.  David A. Black, of the &ldquo;Well Grounded Rubyist,&rdquo; has a slightly less sinister-sounding explanation:</p>

<blockquote><p><em>You can think of an object’s singleton class as an exclusive stash of methods, tailor-made for that object and not shared with other objects—not even with other instances of the object’s class.</em>
- David A. Black</p></blockquote>

<p>The next questions to explore are when and how we as programmers should be interacting with our objects' singleton classes.  Imagine you have an object - an instance of a particular class that you know you want to act in unique ways - creating a whole collection of singleton methods for this class instance would look terribly messy and as mentioned before, wouldn&rsquo;t be very abstract - if your program had to change down the road, you&rsquo;d have to make sure you changed the object keyword on every single one.</p>

<p>Ruby, of course, has an elegant and efficient solution for this problem. The singleton class for a particular object can be defined for multiple methods using the following syntax:</p>

<pre><code class="ruby">class Person
  def lunchtime
    "I eat hamburgers for lunch."
  end
end

chad = Person.new
roger = Person.new
chad.lunchtime     #==&gt; "I eat hamburgers for lunch."
roger.lunchtime    #==&gt; "I eat hamburgers for lunch."

class &lt;&lt; roger
  def lunchtime
    "I eat hay for lunch."
  end

  def bedtime
    "I sleep in a stable."
  end

  def confession
    "I'm actually a horse."
  end
end

chad.lunchtime     #==&gt; "I eat hamburgers for lunch."
roger.lunchtime    #==&gt; "I eat hay for lunch."
chad.bedtime       #==&gt; NoMethodError: undefined method `bedtime' for #&lt;Person:0x007fa98a1fdfe8&gt;
roger.bedtime      #==&gt; "I sleep in a stable."
roger.confession   #==&gt; "I'm actually a horse."
</code></pre>

<p>As you can see, by using the singleton class assignment notation to &lsquo;require&rsquo; it, we&rsquo;re able to bring Roger&rsquo;s singleton class and its associated behaviors out of the shadows in an efficient way.</p>

<p>A frequent use of this concept and syntax in Ruby programming involves streamlining something we already have some experience with - defining class-specific methods.  Up until this point, we&rsquo;ve assigned class methods in a very similar way to that of singleton methods:</p>

<p><code>def self.all; end</code> or <code>def self.most_expensive; end</code></p>

<p>This works, but by incorporating the syntax we just learned, we can streamline class method assignment by relying on its singleton class:
```ruby
class Artist</p>

<p>  class &lt;&lt; self
    def all
      @@all | |= [ ]
    end</p>

<pre><code>def create(artist_name)
  new_artist = Artist.new(artist_name)
  new_artist.save
  new_artist
end

def destroy_all
  all.clear
end
</code></pre>

<p>  end
  # begin regular class methods
  def add_song(song)
    &hellip; .
  end
  &hellip; .
end
<code>``
In this example, because we're assigning the Artist's singleton class inside the body of the class, we're able to utilize 'self, ' and save ourselves some typing and potentially unorganized code. </code>class &lt;&lt; self<code>inside the body is equivalent to</code>class &lt;&lt; Artist` outside the body.</p>

<p><img style="margin-right: 2em" align="left"  src="http://s10.postimg.org/lr45byvcp/Screen_Shot_2015_12_16_at_7_02_08_AM.png" width="300"/></p>

<p>The last thing we&rsquo;ll look at is, which is likely obvious at this point, is how singleton classes fit into the method lookup chain:</p>

<p>As you can see to the left, the object (an instance of class D) first checks its singleton class for the method in question before any modules or its parent class.  From here, the list of possible uses goes on - you are able to even able to incorporate modules in your singleton classes for further class instance customization&hellip;but we&rsquo;ll leave that for another day.</p>
]]></content>
  </entry>
  
</feed>
