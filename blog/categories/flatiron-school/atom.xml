<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flatiron&nbsp;school | Skip_Skillset.push('Ruby')]]></title>
  <link href="http://skipsuva.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://skipsuva.github.io/"/>
  <updated>2016-03-08T12:49:43-05:00</updated>
  <id>http://skipsuva.github.io/</id>
  <author>
    <name><![CDATA[Skip Suva]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ember computed properties in practice]]></title>
    <link href="http://skipsuva.github.io/blog/2016/03/08/ember-computed-properties/"/>
    <updated>2016-03-08T10:56:38-05:00</updated>
    <id>http://skipsuva.github.io/blog/2016/03/08/ember-computed-properties</id>
    <content type="html"><![CDATA[<p>For me, our class' transition from Rails to Ember.js was an exciting one.  I felt as though it marked me taking one step closer to being a real developer - for the first time, harnessing the ultimate developer super-power of being able to transfer programmatic knowledge and thinking across languages and frameworks. This enthusiasm was bolstered after brief exploration - while the land looked quite different than that of ruby and rails&hellip;it felt familiar in an exhilarating way.  This optimism, coupled with the fact that the Ember mascot is an <a href="https://upload.wikimedia.org/wikipedia/en/6/69/Ember.js_Logo_and_Mascot.png">adorable hamster</a>&hellip;I mean, <em>come on.</em></p>

<!-- more -->


<p>In this post, I want to highlight one feature of Ember I think is really cool, computed properties, and show some use cases and code from a recent project I worked on.</p>

<p>What are computed values in Ember?  Let&rsquo;s look at the docs:</p>

<blockquote><p>In a nutshell, computed properties let you declare functions as properties. You create one by defining a computed property as a function, which Ember will automatically call when you ask for the property. You can then use it the same way you would any normal, static property.</p></blockquote>

<p>The code found in the docs highlight <a href="https://guides.emberjs.com/v2.4.0/object-model/computed-properties/">pretty simple executions</a>, defining a property of an object that combines other properties in some way (e.g. combining a first name and a last name).  Coming from ruby, this initially didn&rsquo;t seem that special - the easiest analog would be some sort of helper method defined in a class or view helper.  However, it wasn&rsquo;t until pretty far along in our Ember project, that the real value became clear to me and I was able to write some cool code.  More on that in a bit.</p>

<p>Here&rsquo;s another, slightly more complex example of computed property usage.  In this case, we want to be able to easily produce a list of the conferences that our Programmer object is the keynote speaker of:</p>

<pre><code class="javascript">// programmer.js
export default Ember.Object.extend({
  firstName: null,
  lastName: null,
  conferences: [ ],

  // simple example found in the Ember docs
  fullName: Ember.computed("firstName", "lastName", function( ){
      return `${this.get('firstName')} ${this.get('lastName')}`;
    }),

  // more complex example, utilizing the properties of a collection of conference objects
  keyNoteConferences: Ember.computed("conferences.@each.keyNote", function( ){
    let keyTalks = [ ];
    this.get('conferences').forEach(function(conf){
      if (conf.keyNote === this.get('fullName')) {
        keyTalks.pushObject(conf);
      }
    }.bind(this));
    return keyTalks;
  })
})
</code></pre>

<hr />

<p>In our Ember project, <a href="globo-api.herokuapp.com">Globo</a>, we needed the ability to dynamically access the &lsquo;pins&rsquo; of a user&rsquo;s trip.  Due to the associations of our models in Ember and the Rails API, this meant that we had to go through &lsquo;destinations,&rsquo; a join table of the &lsquo;trips&rsquo; and &lsquo;pins&rsquo; of the current user.  In a rails-only application, this would have been a walk in the park - a quick helper method in the &lsquo;trip&rsquo; class.  However, as we saw above, it&rsquo;s not that simple in Ember - because of the file structure (separation of models, routes, controllers, etc), the concept of &lsquo;this&rsquo; (or &lsquo;self&rsquo; in rails) is pretty dynamic depending on where you&rsquo;re calling it from.  See below for a screenshot of the outcome we were looking for, a poly-line (representing a &lsquo;trip&rsquo;) connecting multiple &lsquo;pins&rsquo;:</p>

<p><img align="clear" src="http://s29.postimg.org/iosgqz85z/Screen_Shot_2016_03_08_at_12_09_23_PM.png" width="650"/></p>

<p>In order to represent this connection, we needed to create a computed property for a trip, &lsquo;pinPoints,&rsquo; which would return an array of coordinates that our Leaflet map component could use for the poly-line.</p>

<pre><code class="javascript">// app/models/trip.js
export default DS.Model.extend({
name: DS.attr('string'),
web_color: DS.attr('string'),
startDate: DS.attr('date'),
user: DS.belongsTo('user'),
createdAt: DS.attr('date'),
destinations: DS.hasMany('destination'),

pinPoints: Ember.computed('destinations', function( ){
  let locationArray = [ ];
  this.get('destinations').forEach(function(destination){
    let pin = destination.get('pin');
    let coords = L.latLng(pin.get('lat'), pin.get('long'));
    locationArray.push(coords);
  });
  return locationArray;
}),
</code></pre>

<p>With this property established, we could then access it on the front end via handlebars to establish the poly-lines:</p>

<p><img align="clear" src="http://s24.postimg.org/h3z3o3uzp/Screen_Shot_2016_03_08_at_12_45_27_PM.png" width="500"/></p>

<p><strong>Resources:</strong></p>

<ul>
<li><a href="https://guides.emberjs.com/v2.4.0/object-model/computed-properties/">Ember Docs on Computed Properties</a> on the History API, pushState and popstate</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building in rails, or: How partials saved my life]]></title>
    <link href="http://skipsuva.github.io/blog/2016/03/01/partials-saved-my-life/"/>
    <updated>2016-03-01T16:04:17-05:00</updated>
    <id>http://skipsuva.github.io/blog/2016/03/01/partials-saved-my-life</id>
    <content type="html"><![CDATA[<p>While kicking off our project, <a href="https://gettogethr.herokuapp.com">gettogethr</a> at the Flatiron School, my group and I quickly aligned on the fact that the best design approach for our idea would be that of a single page web app.  Keeping user experience in mind, we wanted gettogethr to be easy and quick to use, not forcing our users to make unnecessary navigations.  As new developers, this proved a challenge, forcing us to dig deep into elements we had touched on in class, and utilize other we had only glazed over.  Not only did we need to bring responsive design to nearly every element of the main user page, but we needed a codebase where three guys could work on the &lsquo;one page&rsquo; concurrently.  In the end, we successfully accomplished our goal with hefty use of jQuery and AJAX, as well as the decision early on to partial-ize the living christ out of our main index page.</p>

<!-- more -->


<p>Coming into this project, I had a pretty good understanding of how partials in rails worked and the basic benefits of them: I recognized that the use thereof could clean your code up by separating concerns out, and allow for some cool code reuse.  When developing gettogethr, my groupmates and I initially approached our &lsquo;partialization&rsquo; task with the former in mind - we all needed to be able to work on different aspects of the main user page, and by simply breaking the sections into partials we could save ourselves approximately over 9,000 merge conflicts.  However, as we coded on, we were able to find some neat ways to utilize partials that really leveled up my understanding of the concept and practice.</p>

<p><em>While I will not be covering the basics of partials explicitly in this post, I absolutely recommend checking out the resources listed at the bottom of the page.</em></p>

<p>Shown below is the page that a gettogethr user would spend most of their time - it has all of the relevant gathering information on it.  I&rsquo;ve tried to highlight the distinct partials with colored boxes to illustrate the varying degrees of complexity and nesting we ended up using.  We&rsquo;ll look at a few examples, beginning with a typical partial use, and then move on to the more interesting dynamic ones we created.</p>

<p><img align="clear" src="http://s12.postimg.org/uuckafcct/gettogethr.jpg" width="700"/></p>

<p><strong>Collaborators</strong><br/>
In this use case, the goal was to display the names of the people invited, as well as the form to invite more.</p>

<p>```html</p>

<!-- views/gatherings/show.html.erb -->


<div class="row" id="collaborators-row">
    <div id="collaborators-panel" class="col-md-12">
      <div id="collaborators">
        <%= render "collaborators_section" %>
      </div>
    </div>
  </div>


<pre><code>This is the most simple partial usage - simply using erb to render the partial by name, not passing any information in.
</code></pre>

<!-- views/gatherings/_collaborators_section.html.erb -->


<h6 class="collaborators-label">The people involved are</h6>


<div id="collaborator-list">
   <%= render partial: "collaborator", collection: @collaborators %>
</div>




<div id="add-collabs">
  <h6 class="invite-label">Invite people:</h6>
  <%= form_tag("/gatherings/#{@gathering.id}/add-users", remote: true, id: 'add-collaborator-form') do %>
    <%= text_field( :user, :id, options = { class: "form-control autocomplete ac-input", placeholder: 'Name or email address' }) %>
    <%= hidden_field(:user, :id) %>
    <%= submit_tag "Add People", { class:"btn btn-primary" } %>
  <% end %>
</div>




<div id="email-notification-form">
  <%= link_to "Send Everyone an Email Notification", "/gatherings/#{@gathering.id}/mail-users", remote: true, method: :post %>
</div>


<pre><code>Here, we're calling a specific partial with a collection to be used, saving us the need to code an iteration block.  *The `@collaborators` instance variable was defined in the gatherings controller.*
</code></pre>

<!-- views/gatherings/_collaborator.html.erb -->


<div id="collaborator-<%=collaborator.id%>" class="collaborator-btn btn btn-trans <%= (collaborator == current_user ? "btn-danger" : "btn-primary") %>  <%='collaborator-not-notified' if !collaborator.notified_recently?(@gathering)%>">
  <span style="display:inline-block"  class="collaborator">
  <%= collaborator.name %>
  </span>
  <span style="display:inline-block" class="collaborator-delete">

    <%= link_to(raw("<i class='fa fa-times collaborator-delete-icon'></i>"),
    {action:"remove_users", user:collaborator.id}, method: :post, remote: (collaborator == current_user ? false : true), style:"display:inline-block" )%>
  </span>
</div>


<pre><code>This partial has the user specific information we need to be able to view and remove them from the gathering.  Using the collection rendering method from above, we gain access to the singular variable (e.g. collaborator from `@collaborators`).


**Voting**  
Here we begin already two nested partials in - inside the specific item cards (seen in the activities/places sections).  The main goal here was to, utilizing the polymophic associations of our Vote model, create a way to code dynamic and flexible voting buttons that would only be associated with the item of the card they are on.
</code></pre>

<!-- views/activities/_activity.html.erb -->


<div class="item-col col-md-3">
  <div class="activity-box panel panel-solid-default" id="activity-<%= activity.id %>">
    <div class="item panel-heading">
        <h3 class="panel-title"><%= activity.description %></h3>
      <div class="actions pull-right">
        <i class="fa fa-chevron-up"></i>
      </div>
    </div>

    <div class="panel-body">
      <p>
        <%= activity.user.name %> suggests:<br>
        <%= activity.description %> (<%= activity.activity_category.label %>)
      </p>
      <%= button_to "X", gathering_activity_path(@gathering, activity), method: :delete, remote: true, class: 'btn btn-xs', style:"display:inline-block;" %>
    </div>

    <div class="panel-footer">
      <%= render partial: '/votes/form', locals:{votable:activity, gathering:@gathering} %>
    </div>
  </div>
</div>


<pre><code>The ultimate goal here is to be able to link a vote with a specific "votable" (activity, place, time), we utilize the "locals" syntax to pass in locally available variables to the partial.
</code></pre>

<!-- views/votes/_form.html.erb -->


<div class="votebox">
   <% [1,0,-1].each do |thumbage| %>
    <%= render partial:'votes/vote_button', locals:{thumbage: thumbage, gathering: gathering, votable: votable} %>
   <% end %>
</div>


<pre><code>Here, for each vote type (thumbs up, shrug, thumbs down) we follow the same strategy, passing in the "thumbage", gathering and votable to be used by each vote button.
</code></pre>

<!-- views/votes/_vote_button.html.erb -->


<div data-toggle="tooltip" data-placement="bottom" title="<%= users_for_votable_vote(votable, thumbage).join(", ")%>">
  <%= form_tag({controller:"votes", :action => 'submit', thumbage:thumbage,  gathering_id:gathering.id, votable_id:votable.id, votable_class:votable.class.to_s}, {method: :post, remote: true}) do%>
    <%= button_tag(type: 'submit', class: "btn btn-primary btn-xs #{class_mapping(thumbage)} #{voted_class if current_vote(votable).try(:value) == thumbage}" ) do %>
     <i class="fa <%=icon_mapping(thumbage)%>"></i>
     <span class="vote-count"><%= vote_count(votable,thumbage)%></span>
    <% end %>
  <% end %>
</div>


<p>```
Finally, here, when a user clicks a vote button, it will have all the neccessary information it needs to be able to send the AJAX call to the controller to log the vote.</p>

<p>Whew!  As I mentioned before, going through this process was a fantastic learning experience, and deepened my understanding of how to best use partials in a rails app - single page or not.</p>

<p><strong>Resources:</strong></p>

<ul>
<li><a href="http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials">Rails Guides</a></li>
<li><a href="http://api.rubyonrails.org/classes/ActionView/PartialRenderer.html">Rails ActionView API Docs</a></li>
<li><a href="https://robots.thoughtbot.com/rendering-collections-in-rails">ThoughtBot Blog</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Janky Javascript...]]></title>
    <link href="http://skipsuva.github.io/blog/2016/02/09/janky-dot-js/"/>
    <updated>2016-02-09T19:34:38-05:00</updated>
    <id>http://skipsuva.github.io/blog/2016/02/09/janky-dot-js</id>
    <content type="html"><![CDATA[<p>While working on our recent project, <a href="https://gettogethr.herokuapp.com">gettogethr</a>, our team saw a number of opportunities to make the user experience feel much quicker and more customizable.  Of course, in order to see these through, we knew we&rsquo;d need to call upon our new friend Javascript and her metal-armed brother (A)<a href="http://vignette2.wikia.nocookie.net/mortalkombat/images/2/2e/Jax_MK3_ver.png/revision/latest?cb=20110416103234&amp;path-prefix=ru">JAX</a>.</p>

<!-- more -->


<p><img src="http://i.imgur.com/VTLzZB1.gif" alt="" /></p>

<p>A la Google Docs, we wanted to provide the ability to change the title of a shared event on the fly, ensuring the name change persists in the database and upon page reload.</p>

<p>The first step to achieve this effect was to build a jQuery double-click listener on the title element which is initiated upon page load.  When activated, a text box input is created with some attributes (in order to show the old/exisiting title) and replaces the title html element on the page.</p>

<pre><code class="javascript">Gathering.prototype.addTitleListener = function( ) {
  this.$gatheringTitle.dblclick(function( ) {
    var oldTitle = this.$gatheringTitle.text( );
    var textbox = document.createElement('input');
    textbox.type = 'text';
    textbox.id = 'title';
    textbox.value = oldTitle;
    this.$gatheringTitle.html(textbox);
    $('#title').on('keypress', titleKeypressListener.bind(this) );
  }.bind(this) );
};
</code></pre>

<p>Next, we assign a jQuery listener to the keypresses on that newly created input box (&lsquo;#title&rsquo;).  When the <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">enter key is hit</a> (e.keyCode === 13), the current value of the text box and the id of the current event (captured via an identifying id) are assigned to variables to be used in an AJAX call to our gatherings controller.</p>

<pre><code class="javascript">var titleKeypressListener = function(e) {
  if(e.keyCode === 13) {
    var title = $('#title').val( );
    var URL =  this.gatheringId;
    $.ajax({
      method: 'patch',
      url: URL,
      dataType: 'script',
      data: {
        gathering: {
          id: this.gatheringId,
          title: title
        }},
      success: function( ){
        this.$gatheringTitle.html($('#title').val( ));
      }.bind(this)
    });
  }
};
</code></pre>

<p>This AJAX call sends the newly entered title, via patch request, to our controller.  There, we identify the correct gathering via the established params, and update the object with our new title (gathering_params).  Finally, upon success, we replace the text input element with the new title.</p>

<pre><code class="ruby">def update
  @gathering = Gathering.find(params [ :id ] )
  respond_to do | format |
    if @gathering.update(gathering_params)
        ....
      format.js { head 204 }
        ....
    end
  end
end
</code></pre>

<p>From here, we could changing the title as many times as you want because the double click listener is still active.</p>

<p><strong>Resources:</strong></p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">Mozilla Developer Network</a> on (deprecated) use of keyCodes</li>
<li><a href="https://jquery.com/">jQuery Documentation</a> for all the things</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time Traveling & Finding a Use for .pushState( )]]></title>
    <link href="http://skipsuva.github.io/blog/2016/01/26/history-and-pushstate/"/>
    <updated>2016-01-26T09:37:57-05:00</updated>
    <id>http://skipsuva.github.io/blog/2016/01/26/history-and-pushstate</id>
    <content type="html"><![CDATA[<p>When you type &ldquo;this&rdquo; into your browser&rsquo;s javascript console, you&rsquo;re returned an object:</p>

<p><code>Window {external: Object, chrome: Object, document: document, GoogleAnalyticsObject: "ga", waffle: Object…}</code></p>

<p>While debugging your code, seeing this object could cause frustration (and likely has at some point) - you may have forgotten to bind &ldquo;this&rdquo; to the function in question or something along those lines.  In this context, the appearance of a wild &ldquo;Window&rdquo; is nothing more than a sign that you&rsquo;ve done something wrong.</p>

<!-- more -->


<p>Up until this point, I&rsquo;ve not interacted with this &ldquo;Window&rdquo; object in any formal capacity - brief investigations reveal that it holds a bunch of information pertaining to the browser, screen size, and a torrent of other unknown attributes.  It wasn&rsquo;t until a googling rabbit hole stemming from Turbolinks lead me to the javascript &ldquo;pushState&rdquo; method that I learned how interactions with the &ldquo;Window&rdquo; can be incorporated into code to have a web app do cool things. This post will primarily focus on interacting with the &ldquo;history&rdquo; attribute, however I&rsquo;m certain that many of the others are as useful and interesting.</p>

<p>The &ldquo;history&rdquo; object (accessible via <code>window.history</code> in your browser console), in short, provides an interface for manipulating the browser&rsquo;s session history.  The most simple examples of this manipulation are via the <code>window.history.forward( )</code>, <code>window.history.back( )</code> and <code>window.history.go(-3)</code> methods, allowing you to navigate the browser forward and back through the pages in the user&rsquo;s session history, as well as target a specific location.</p>

<p>Digging further, we find <code>.pushState()</code> and <code>.replaceState()</code>, which allow you to add and modify history entries.  From <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">MDN</a>:</p>

<blockquote><p>Using <code>history.pushState( )</code> changes the referrer that gets used in the >HTTP header for XMLHttpRequest objects created after you change the >state. The referrer will be the URL of the document whose window is >this at the time of creation of the XMLHttpRequest object."</p></blockquote>

<p>A simple way to see this in action is to enter the following into your developer console:</p>

<pre><code class="javascript">var stateObj = { foo: "bar" };
history.pushState(stateObj, "", "bar.html");
</code></pre>

<p>Woah - the url changed but you didn&rsquo;t go anywhere.  Now check your browser history - it added this phantom page url as well.  This is cool, but how could this be useful?  A use case could involve leveraging jQuery to fetch and load page templates while having .pushState( ) feign page changes, resulting in a much faster user experience than typical full-page reload.  This strategy would really only be effective on applications that share a layout (for header/footer/styling) across many pages.</p>

<p>Using a very, very simple multi-page app example, we could use the following code snippet (drawn from a post by <a href="https://rosspenman.com/pushstate-jquery/">Ross Penman</a>) to execute what was outlined above:</p>

<pre><code class="javascript">$(function( ) {
  var $main = $("main");

  $('a').on("click", function( ) {
    var href = $(this).attr("href");

    history.pushState({ }, '', href);

    $main.load(href + " main");
    return false;
  });
});
</code></pre>

<p>As discussed, the result of incorporating this code is the illusion that our page is reloading at blazing speeds, when in reality we&rsquo;re only pulling and rendering the <code>&lt;main&gt;&lt;/main&gt;</code> content from each page clicked with the &ldquo;.load( )&rdquo; jQuery method.</p>

<p><img src="https://media.giphy.com/media/l0NwsWzFCZqNs6f5u/giphy.gif" alt="" /></p>

<p>There&rsquo;s an issue with this code though - while we get the initial effect we wanted, the user isn&rsquo;t able to use the back button.  In order to do that, we&rsquo;d need to utilize AJAX and check the &ldquo;popstate&rdquo; of the page - a window event that is updated whenever the active history entry changes (in this case, right before .pushState( ) is called).  The full code for this functionality can be found on <a href="https://rosspenman.com/pushstate-jquery/">Ross Penman&rsquo;s illustrative post</a>, with some great explanation of the methodology.</p>

<p>I still have a lot to learn about this topic, as well as a lot of questions - for example, how incorporating the use of .pushState( ) into an app would affect cross-browser performance.</p>

<p><strong>Resources:</strong></p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate">Mozilla Developer Network</a> on the History API, pushState and popstate</li>
<li><a href="https://rosspenman.com/pushstate-jquery/">Ross Penman</a> on jQuery and pushState</li>
<li><a href="http://blog.honeybadger.io/ditching-your-single-page-app-for-turbolinks/">Honeybadger</a> on Turbolinks</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Injections & (Ideally Not) You]]></title>
    <link href="http://skipsuva.github.io/blog/2016/01/01/sql-injections-and-you/"/>
    <updated>2016-01-01T17:34:34-05:00</updated>
    <id>http://skipsuva.github.io/blog/2016/01/01/sql-injections-and-you</id>
    <content type="html"><![CDATA[<p>Before diving headlong into the magic of ActiveRecord, our class spend a few days learning the basics of SQL - practicing basic queries, joins etc. - as well as beginning a much longer discussion around data-driven applications.  A topic that came up briefly piqued my interest: the strangely biological/viral-sounding &lsquo;SQL Injection&rsquo; - a malicious action someone can take against an unprepared database to acquire information, or (sometimes) worse, destroy the data.  We spent much more time discussing the &lsquo;sterilization&rsquo; of code to prevent such vulnerabilities than the actual mechanics of an attack, so I thought it would be worth while to learn more.</p>

<!-- more -->


<p>Essentially all consumer software applications are based on top of databases - they&rsquo;re used to keep track of user accounts, user preferences, user passwords, bank account numbers&hellip;the list goes on.  At the most basic level, the way software interacts with its databases is pretty similar: when information is needed, a query (in one form or another) is sent to the database and the requested information is transmitted back.  Depending on how the software is written, this query can be much more accessible than one might imagine.</p>

<p>An SQL Injection is a technique that leverages specific syntactic patterns found in SQL interactions with relational databases to gain access to information that would otherwise be unavailable.  Such injections can allow someone to log into other peoples accounts, change or extract data, and even drop entire databases.</p>

<p>There are a few ways to actually perform an injection attack - a common / accessible one being via URL manipulation.  A particularly vulnerable website will expose their dynamic SQL queries as you navigate their site.  You can find common examples of this by googling:</p>

<ul>
<li>inurl:index.php?id=</li>
<li>inurl:buy.php?category=</li>
<li>inurl:article.php?ID=</li>
<li>inurl:play_old.php?id=</li>
<li>inurl:declaration_more.php?decl_id=</li>
<li>inurl:pageid=</li>
</ul>


<p>While not every site returned is definitely vulnerable, testing each is as easy as navigating to the page and entering an apostrophe after the url ( *<a href="http://www.example.com/index.php?catid=1%E2%80%99*">http://www.example.com/index.php?catid=1%E2%80%99*</a> ).  If a site isn&rsquo;t well protectected, you&rsquo;ll see an SQL error on the page.</p>

<p><img align="clear" src="http://s14.postimg.org/g45yf6m35/Screen_Shot_2016_01_12_at_6_52_02_AM.png" width="600"/></p>

<p>Using this information, someone with enough knowledge (and time on their hands) could determine the structure of the site&rsquo;s database tables and construct queries to extract information and data.</p>

<p>Let&rsquo;s look at a (very simple) different example:  Your favorite social media website Facetagram asks you for your username and password in order to authenticate you and allow you to access/view your posts and friends.  It&rsquo;s quite possible that these two fields (username and password) are wired to the &ldquo;Users&rdquo; table of the Facetagram relational database, which means when you plug your credentials in and hit &lsquo;enter,&rsquo; the SQL query sent might look like something similar to this:</p>

<pre><code>uName = getRequestString("UserName");
uPass = getRequestString("UserPass");

sql = "SELECT * FROM Users WHERE Name ='" + uName + "' AND Pass ='" + uPass + "'"
</code></pre>

<p>As you can see, the user&rsquo;s entries are assigned to variables which are then directly used in the query to access the user&rsquo;s data.  Seeing these mechanics, someone without much SQL experience could reasonably believe that the data is safe because a user must enter in the correct password - we&rsquo;ve all had to re-enter our credentials when we have a type logging into a site!  However, this is not necessarily true (at least in this elementary example).</p>

<p><img align="clear" src="http://danieldafoe.com/res/sticker-sql-injection.png" width="500"/></p>

<p>In the example outlined above, a savvy individual could enter <code>" or "" = "</code> into the username/password entry fields, which would create the following valid SQL query:</p>

<pre><code>SELECT * FROM Users WHERE Name ="" or "" = "" AND Pass ="" or ""=""
</code></pre>

<p>Because <code>WHERE "" = ""</code> always evaluates as true, this SQL injection would return all rows of the Users table to the hacker, exposing the information of potentially thousands of users.</p>

<p>This is pretty scary stuff, given how easily (again, in this elementary example) this can be executed.  However, developers can protect their code&hellip;and their databases.  Using a technique called sterilization, the susceptible syntax can be substituted in the query with question marks (or other symbols, I believe) and the user-entered variables are called on at the time of execution.  By passing the user entries in as such, SQL does some behind the scenes magic, encapsulating the entry into a sting, ensuring no special characters are able to affect the query&hellip;like ones that were used above.  Using this method, the code example from above could be refactored into:</p>

<pre><code>uName = getRequestString("UserName");
uPass = getRequestString("UserPass");

sql = "SELECT * FROM Users WHERE Name ='" + ? + "' AND Pass ='" + ? + "'"

db.Execute(sql, uName, uPass)
</code></pre>

<p>If our hacker tried the same SQL injection now, their entry would be rejected by the system because after sterilization it would look like this: <code>" "" or ""=" "</code></p>

<p>Despite being preventable, SQL Injection attacks against large companies are very common.  Companies such as VTech, TalkTalk, Planned Parenthood, MySQL Servers, and University of Sydney are just a handful of those hit&hellip;in 2015 alone.  In the past 4 years, the likes of Yahoo, LinkedIn, Adobe, and LivingSocial have met similar fates, exposing hundreds of thousands of user accounts and passwords.  A more comprehensive list (with associated hack details) can be found <a href="http://codecurmudgeon.com/wp/sql-injection-hall-of-shame/">here</a>.</p>

<p>More information on identifying vulnerable websites and google dorking can be found <a href="https://blog.udemy.com/sql-injection-tutorial/">here</a>.  For more information about preventing SQL injection attacks, check out<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet"> OWASP&rsquo;s website</a>.</p>
]]></content>
  </entry>
  
</feed>
