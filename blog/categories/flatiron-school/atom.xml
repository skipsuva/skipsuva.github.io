<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flatiron&nbsp;school | Skip_Skillset.push('Ruby')]]></title>
  <link href="http://skipsuva.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://skipsuva.github.io/"/>
  <updated>2016-02-10T09:15:24-05:00</updated>
  <id>http://skipsuva.github.io/</id>
  <author>
    <name><![CDATA[Skip Suva]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[This Week in Janky Javascript...]]></title>
    <link href="http://skipsuva.github.io/blog/2016/02/09/janky-dot-js/"/>
    <updated>2016-02-09T19:34:38-05:00</updated>
    <id>http://skipsuva.github.io/blog/2016/02/09/janky-dot-js</id>
    <content type="html"><![CDATA[<p>While working on our recent project, <a href="https://gettogethr.herokuapp.com">gettogethr</a>, our team saw a number of opportunities to make the user experience feel much quicker and more customizable.  Of course, in order to see these through, we knew we&rsquo;d need to call upon our new friend Javascript and her metal-armed brother (A)<a href="http://vignette2.wikia.nocookie.net/mortalkombat/images/2/2e/Jax_MK3_ver.png/revision/latest?cb=20110416103234&amp;path-prefix=ru">JAX</a>.</p>

<!-- more -->


<p><img src="http://i.imgur.com/VTLzZB1.gif" alt="" /></p>

<p>A la Google Docs, we wanted to provide the ability to change the title of a shared event on the fly, ensuring the name change persists in the database and upon page reload.</p>

<p>The first step to achieve this effect was to build a jQuery double-click listener on the title element which is initiated upon page load.  When activated, a text box input is created with some attributes (in order to show the old/exisiting title) and replaces the title html element on the page.</p>

<pre><code class="javascript">Gathering.prototype.addTitleListener = function( ) {
  this.$gatheringTitle.dblclick(function( ) {
    var oldTitle = this.$gatheringTitle.text( );
    var textbox = document.createElement('input');
    textbox.type = 'text';
    textbox.id = 'title';
    textbox.value = oldTitle;
    this.$gatheringTitle.html(textbox);
    $('#title').on('keypress', titleKeypressListener.bind(this) );
  }.bind(this) );
};
</code></pre>

<p>Next, we assign a jQuery listener to the keypresses on that newly created input box (&lsquo;#title&rsquo;).  When the <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">enter key is hit</a> (e.keyCode === 13), the current value of the text box and the id of the current event (captured via an identifying id) are assigned to variables to be used in an AJAX call to our gatherings controller.</p>

<pre><code class="javascript">var titleKeypressListener = function(e) {
  if(e.keyCode === 13) {
    var title = $('#title').val( );
    var URL =  this.gatheringId;
    $.ajax({
      method: 'patch',
      url: URL,
      dataType: 'script',
      data: {
        gathering: {
          id: this.gatheringId,
          title: title
        }},
      success: function( ){
        this.$gatheringTitle.html($('#title').val( ));
      }.bind(this)
    });
  }
};
</code></pre>

<p>This AJAX call sends the newly entered title, via patch request, to our controller.  There, we identify the correct gathering via the established params, and update the object with our new title (gathering_params).  Finally, upon success, we replace the text input element with the new title.</p>

<pre><code class="ruby">def update
  @gathering = Gathering.find(params [ :id ] )
  respond_to do | format |
    if @gathering.update(gathering_params)
        ....
      format.js { head 204 }
        ....
    end
  end
end
</code></pre>

<p>From here, we could changing the title as many times as you want because the double click listener is still active.</p>

<p><strong>Resources:</strong></p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">Mozilla Developer Network</a> on (deprecated) use of keyCodes</li>
<li><a href="https://jquery.com/">jQuery Documentation</a> for all the things</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time Traveling & Finding a Use for .pushState( )]]></title>
    <link href="http://skipsuva.github.io/blog/2016/01/26/history-and-pushstate/"/>
    <updated>2016-01-26T09:37:57-05:00</updated>
    <id>http://skipsuva.github.io/blog/2016/01/26/history-and-pushstate</id>
    <content type="html"><![CDATA[<p>When you type &ldquo;this&rdquo; into your browser&rsquo;s javascript console, you&rsquo;re returned an object:</p>

<p><code>Window {external: Object, chrome: Object, document: document, GoogleAnalyticsObject: "ga", waffle: Objectâ€¦}</code></p>

<p>While debugging your code, seeing this object could cause frustration (and likely has at some point) - you may have forgotten to bind &ldquo;this&rdquo; to the function in question or something along those lines.  In this context, the appearance of a wild &ldquo;Window&rdquo; is nothing more than a sign that you&rsquo;ve done something wrong.</p>

<!-- more -->


<p>Up until this point, I&rsquo;ve not interacted with this &ldquo;Window&rdquo; object in any formal capacity - brief investigations reveal that it holds a bunch of information pertaining to the browser, screen size, and a torrent of other unknown attributes.  It wasn&rsquo;t until a googling rabbit hole stemming from Turbolinks lead me to the javascript &ldquo;pushState&rdquo; method that I learned how interactions with the &ldquo;Window&rdquo; can be incorporated into code to have a web app do cool things. This post will primarily focus on interacting with the &ldquo;history&rdquo; attribute, however I&rsquo;m certain that many of the others are as useful and interesting.</p>

<p>The &ldquo;history&rdquo; object (accessible via <code>window.history</code> in your browser console), in short, provides an interface for manipulating the browser&rsquo;s session history.  The most simple examples of this manipulation are via the <code>window.history.forward( )</code>, <code>window.history.back( )</code> and <code>window.history.go(-3)</code> methods, allowing you to navigate the browser forward and back through the pages in the user&rsquo;s session history, as well as target a specific location.</p>

<p>Digging further, we find <code>.pushState()</code> and <code>.replaceState()</code>, which allow you to add and modify history entries.  From <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">MDN</a>:</p>

<blockquote><p>Using <code>history.pushState( )</code> changes the referrer that gets used in the >HTTP header for XMLHttpRequest objects created after you change the >state. The referrer will be the URL of the document whose window is >this at the time of creation of the XMLHttpRequest object."</p></blockquote>

<p>A simple way to see this in action is to enter the following into your developer console:</p>

<pre><code class="javascript">var stateObj = { foo: "bar" };
history.pushState(stateObj, "", "bar.html");
</code></pre>

<p>Woah - the url changed but you didn&rsquo;t go anywhere.  Now check your browser history - it added this phantom page url as well.  This is cool, but how could this be useful?  A use case could involve leveraging jQuery to fetch and load page templates while having .pushState( ) feign page changes, resulting in a much faster user experience than typical full-page reload.  This strategy would really only be effective on applications that share a layout (for header/footer/styling) across many pages.</p>

<p>Using a very, very simple multi-page app example, we could use the following code snippet (drawn from a post by <a href="https://rosspenman.com/pushstate-jquery/">Ross Penman</a>) to execute what was outlined above:</p>

<pre><code class="javascript">$(function( ) {
  var $main = $("main");

  $('a').on("click", function( ) {
    var href = $(this).attr("href");

    history.pushState({ }, '', href);

    $main.load(href + " main");
    return false;
  });
});
</code></pre>

<p>As discussed, the result of incorporating this code is the illusion that our page is reloading at blazing speeds, when in reality we&rsquo;re only pulling and rendering the <code>&lt;main&gt;&lt;/main&gt;</code> content from each page clicked with the &ldquo;.load( )&rdquo; jQuery method.</p>

<p><img src="https://media.giphy.com/media/l0NwsWzFCZqNs6f5u/giphy.gif" alt="" /></p>

<p>There&rsquo;s an issue with this code though - while we get the initial effect we wanted, the user isn&rsquo;t able to use the back button.  In order to do that, we&rsquo;d need to utilize AJAX and check the &ldquo;popstate&rdquo; of the page - a window event that is updated whenever the active history entry changes (in this case, right before .pushState( ) is called).  The full code for this functionality can be found on <a href="https://rosspenman.com/pushstate-jquery/">Ross Penman&rsquo;s illustrative post</a>, with some great explanation of the methodology.</p>

<p>I still have a lot to learn about this topic, as well as a lot of questions - for example, how incorporating the use of .pushState( ) into an app would affect cross-browser performance.</p>

<p><strong>Resources:</strong></p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate">Mozilla Developer Network</a> on the History API, pushState and popstate</li>
<li><a href="https://rosspenman.com/pushstate-jquery/">Ross Penman</a> on jQuery and pushState</li>
<li><a href="http://blog.honeybadger.io/ditching-your-single-page-app-for-turbolinks/">Honeybadger</a> on Turbolinks</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Injections & (Ideally Not) You]]></title>
    <link href="http://skipsuva.github.io/blog/2016/01/01/sql-injections-and-you/"/>
    <updated>2016-01-01T17:34:34-05:00</updated>
    <id>http://skipsuva.github.io/blog/2016/01/01/sql-injections-and-you</id>
    <content type="html"><![CDATA[<p>Before diving headlong into the magic of ActiveRecord, our class spend a few days learning the basics of SQL - practicing basic queries, joins etc. - as well as beginning a much longer discussion around data-driven applications.  A topic that came up briefly piqued my interest: the strangely biological/viral-sounding &lsquo;SQL Injection&rsquo; - a malicious action someone can take against an unprepared database to acquire information, or (sometimes) worse, destroy the data.  We spent much more time discussing the &lsquo;sterilization&rsquo; of code to prevent such vulnerabilities than the actual mechanics of an attack, so I thought it would be worth while to learn more.</p>

<!-- more -->


<p>Essentially all consumer software applications are based on top of databases - they&rsquo;re used to keep track of user accounts, user preferences, user passwords, bank account numbers&hellip;the list goes on.  At the most basic level, the way software interacts with its databases is pretty similar: when information is needed, a query (in one form or another) is sent to the database and the requested information is transmitted back.  Depending on how the software is written, this query can be much more accessible than one might imagine.</p>

<p>An SQL Injection is a technique that leverages specific syntactic patterns found in SQL interactions with relational databases to gain access to information that would otherwise be unavailable.  Such injections can allow someone to log into other peoples accounts, change or extract data, and even drop entire databases.</p>

<p>There are a few ways to actually perform an injection attack - a common / accessible one being via URL manipulation.  A particularly vulnerable website will expose their dynamic SQL queries as you navigate their site.  You can find common examples of this by googling:</p>

<ul>
<li>inurl:index.php?id=</li>
<li>inurl:buy.php?category=</li>
<li>inurl:article.php?ID=</li>
<li>inurl:play_old.php?id=</li>
<li>inurl:declaration_more.php?decl_id=</li>
<li>inurl:pageid=</li>
</ul>


<p>While not every site returned is definitely vulnerable, testing each is as easy as navigating to the page and entering an apostrophe after the url ( *<a href="http://www.example.com/index.php?catid=1%E2%80%99*">http://www.example.com/index.php?catid=1%E2%80%99*</a> ).  If a site isn&rsquo;t well protectected, you&rsquo;ll see an SQL error on the page.</p>

<p><img align="clear" src="http://s14.postimg.org/g45yf6m35/Screen_Shot_2016_01_12_at_6_52_02_AM.png" width="600"/></p>

<p>Using this information, someone with enough knowledge (and time on their hands) could determine the structure of the site&rsquo;s database tables and construct queries to extract information and data.</p>

<p>Let&rsquo;s look at a (very simple) different example:  Your favorite social media website Facetagram asks you for your username and password in order to authenticate you and allow you to access/view your posts and friends.  It&rsquo;s quite possible that these two fields (username and password) are wired to the &ldquo;Users&rdquo; table of the Facetagram relational database, which means when you plug your credentials in and hit &lsquo;enter,&rsquo; the SQL query sent might look like something similar to this:</p>

<pre><code>uName = getRequestString("UserName");
uPass = getRequestString("UserPass");

sql = "SELECT * FROM Users WHERE Name ='" + uName + "' AND Pass ='" + uPass + "'"
</code></pre>

<p>As you can see, the user&rsquo;s entries are assigned to variables which are then directly used in the query to access the user&rsquo;s data.  Seeing these mechanics, someone without much SQL experience could reasonably believe that the data is safe because a user must enter in the correct password - we&rsquo;ve all had to re-enter our credentials when we have a type logging into a site!  However, this is not necessarily true (at least in this elementary example).</p>

<p><img align="clear" src="http://danieldafoe.com/res/sticker-sql-injection.png" width="500"/></p>

<p>In the example outlined above, a savvy individual could enter <code>" or "" = "</code> into the username/password entry fields, which would create the following valid SQL query:</p>

<pre><code>SELECT * FROM Users WHERE Name ="" or "" = "" AND Pass ="" or ""=""
</code></pre>

<p>Because <code>WHERE "" = ""</code> always evaluates as true, this SQL injection would return all rows of the Users table to the hacker, exposing the information of potentially thousands of users.</p>

<p>This is pretty scary stuff, given how easily (again, in this elementary example) this can be executed.  However, developers can protect their code&hellip;and their databases.  Using a technique called sterilization, the susceptible syntax can be substituted in the query with question marks (or other symbols, I believe) and the user-entered variables are called on at the time of execution.  By passing the user entries in as such, SQL does some behind the scenes magic, encapsulating the entry into a sting, ensuring no special characters are able to affect the query&hellip;like ones that were used above.  Using this method, the code example from above could be refactored into:</p>

<pre><code>uName = getRequestString("UserName");
uPass = getRequestString("UserPass");

sql = "SELECT * FROM Users WHERE Name ='" + ? + "' AND Pass ='" + ? + "'"

db.Execute(sql, uName, uPass)
</code></pre>

<p>If our hacker tried the same SQL injection now, their entry would be rejected by the system because after sterilization it would look like this: <code>" "" or ""=" "</code></p>

<p>Despite being preventable, SQL Injection attacks against large companies are very common.  Companies such as VTech, TalkTalk, Planned Parenthood, MySQL Servers, and University of Sydney are just a handful of those hit&hellip;in 2015 alone.  In the past 4 years, the likes of Yahoo, LinkedIn, Adobe, and LivingSocial have met similar fates, exposing hundreds of thousands of user accounts and passwords.  A more comprehensive list (with associated hack details) can be found <a href="http://codecurmudgeon.com/wp/sql-injection-hall-of-shame/">here</a>.</p>

<p>More information on identifying vulnerable websites and google dorking can be found <a href="https://blog.udemy.com/sql-injection-tutorial/">here</a>.  For more information about preventing SQL injection attacks, check out<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet"> OWASP&rsquo;s website</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Singleton Classes: The Class' Mysterious, Estranged Uncle]]></title>
    <link href="http://skipsuva.github.io/blog/2015/12/15/singleton-methods-and-classes/"/>
    <updated>2015-12-15T06:34:53-05:00</updated>
    <id>http://skipsuva.github.io/blog/2015/12/15/singleton-methods-and-classes</id>
    <content type="html"><![CDATA[<p>As we continue to climb further down the rabbit hole that is object oriented programming, the sheer magnitude of my ignorance is becoming more clear everyday - and I have a feeling I should start getting comfortable existing in this state of &ldquo;conscious incompetence&rdquo; for a while.  One thing I continue to find myself uncomfortable with is separate class object interactions - the thought of doing another &ldquo;Artist-Song-Genre&rdquo; lab makes me dry-heave.  As such, I thought it would be a good exercise to try and dig into a related topic and work to better understand class interactions.</p>

<!-- more -->


<p>We&rsquo;ve seen the use of <strong>singleton methods</strong> before, and on the surface they look pretty straightforward - you simply define a particular method directly on the desired object, after which <em>only</em> that object can have that method called on it:<br/>
<code>ruby
actor = "Leonardo DiCaprio"
def actor.oscar
  self + " will never win an Oscar"
end
actor.oscar                       #==&gt; "Leonardo DiCaprio will never win an Oscar"
"Matthew McConaughey".oscar  #==&gt; NoMethodError: undefined method `oscar' for "Matthew McConaughey":String
</code><br/>
Makes sense, right?  Visually, you can see what&rsquo;s going on.  Take a moment and consider something we&rsquo;ve discussed a number of times in class - the concept of abstraction in our code.  The strategy above, while legitimate, is about as literal as we could have made it.  You may not be surprised to learn that Ruby has an answer for us - and it is related to <em>where</em> a singleton method actually lives.</p>

<p>It is here we are introduced to a shadow-like, creepy, estranged-uncle class.  At instanciation, every object is actually born with <em>two</em> classes - the class that it is an instance in, and its singleton class.  At the time of their creation, they have no name, and are effectively anonymous until explicitly called upon.  David A. Black, of the &ldquo;Well Grounded Rubyist,&rdquo; has a slightly less sinister-sounding explanation:</p>

<blockquote><p><em>You can think of an objectâ€™s singleton class as an exclusive stash of methods, tailor-made for that object and not shared with other objectsâ€”not even with other instances of the objectâ€™s class.</em>
- David A. Black</p></blockquote>

<p>The next questions to explore are when and how we as programmers should be interacting with our objects' singleton classes.  Imagine you have an object - an instance of a particular class that you know you want to act in unique ways - creating a whole collection of singleton methods for this class instance would look terribly messy and as mentioned before, wouldn&rsquo;t be very abstract - if your program had to change down the road, you&rsquo;d have to make sure you changed the object keyword on every single one.</p>

<p>Ruby, of course, has an elegant and efficient solution for this problem. The singleton class for a particular object can be defined for multiple methods using the following syntax:</p>

<pre><code class="ruby">class Person
  def lunchtime
    "I eat hamburgers for lunch."
  end
end

chad = Person.new
roger = Person.new
chad.lunchtime     #==&gt; "I eat hamburgers for lunch."
roger.lunchtime    #==&gt; "I eat hamburgers for lunch."

class &lt;&lt; roger
  def lunchtime
    "I eat hay for lunch."
  end

  def bedtime
    "I sleep in a stable."
  end

  def confession
    "I'm actually a horse."
  end
end

chad.lunchtime     #==&gt; "I eat hamburgers for lunch."
roger.lunchtime    #==&gt; "I eat hay for lunch."
chad.bedtime       #==&gt; NoMethodError: undefined method `bedtime' for #&lt;Person:0x007fa98a1fdfe8&gt;
roger.bedtime      #==&gt; "I sleep in a stable."
roger.confession   #==&gt; "I'm actually a horse."
</code></pre>

<p>As you can see, by using the singleton class assignment notation to &lsquo;require&rsquo; it, we&rsquo;re able to bring Roger&rsquo;s singleton class and its associated behaviors out of the shadows in an efficient way.</p>

<p>A frequent use of this concept and syntax in Ruby programming involves streamlining something we already have some experience with - defining class-specific methods.  Up until this point, we&rsquo;ve assigned class methods in a very similar way to that of singleton methods:</p>

<p><code>def self.all; end</code> or <code>def self.most_expensive; end</code></p>

<p>This works, but by incorporating the syntax we just learned, we can streamline class method assignment by relying on its singleton class:
```ruby
class Artist</p>

<p>  class &lt;&lt; self
    def all
      @@all | |= [ ]
    end</p>

<pre><code>def create(artist_name)
  new_artist = Artist.new(artist_name)
  new_artist.save
  new_artist
end

def destroy_all
  all.clear
end
</code></pre>

<p>  end
  # begin regular class methods
  def add_song(song)
    &hellip; .
  end
  &hellip; .
end
<code>``
In this example, because we're assigning the Artist's singleton class inside the body of the class, we're able to utilize 'self, ' and save ourselves some typing and potentially unorganized code. </code>class &lt;&lt; self<code>inside the body is equivalent to</code>class &lt;&lt; Artist` outside the body.</p>

<p><img style="margin-right: 2em" align="left"  src="http://s10.postimg.org/lr45byvcp/Screen_Shot_2015_12_16_at_7_02_08_AM.png" width="300"/></p>

<p>The last thing we&rsquo;ll look at is, which is likely obvious at this point, is how singleton classes fit into the method lookup chain:</p>

<p>As you can see to the left, the object (an instance of class D) first checks its singleton class for the method in question before any modules or its parent class.  From here, the list of possible uses goes on - you are able to even able to incorporate modules in your singleton classes for further class instance customization&hellip;but we&rsquo;ll leave that for another day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Scraping & Hacker News]]></title>
    <link href="http://skipsuva.github.io/blog/2015/12/11/hacker-new-must-read/"/>
    <updated>2015-12-11T06:53:51-05:00</updated>
    <id>http://skipsuva.github.io/blog/2015/12/11/hacker-new-must-read</id>
    <content type="html"><![CDATA[<p>After covering basic web scraping in class, I thought it would be fun to get some additional practice scraping a live website and to create a simple, useful app with the result.  The premise is pretty straightforward, but offers a feature not easily gleaned from simply visiting the <a href="https://news.ycombinator.com/">Hacker News</a> website - the program compares <em>both</em> each article&rsquo;s Reddit-style point count with the quantity of comments.  After identifying that article, it launches the webpage automatically from the console.  See below for a repository link to &lsquo;Must Read Hacker News.&rsquo;</p>

<!-- more -->


<p>Utilizing the <a href="https://rubygems.org/gems/nokogiri/versions/1.6.7">Nokogiri gem</a>, I parse 4 pages of Hacker News, identifying the necessary css selectors and assigning to an array of hashes.  From there, it&rsquo;s a simple each loop in the &lsquo;calculator&rsquo; method to identify the one article with the highest point score and highest comment count.</p>

<p>The main challenge I ran into was identifying a way to navigate the structure of the website - articles on Hacker News are arranged in a non-nested table, meaning getting from title/link to point count and comments wasn&rsquo;t as easy as I had anticipated.  Shown below is a visualization of what I mean - the table row that holds the subtext is not nested in the title table row, instead it is just the next <tr>.</p>

<p><img align="clear" src="http://s12.postimg.org/7t4f9xg6l/Screen_Shot_2015_12_11_at_8_29_48_AM.png" width="500"/></p>

<p>I got some excellent pointers from <a href="http://flats.github.io/">Dave Flaherty</a> on how to do just that, utilizing the &lsquo;.parent&rsquo; Nokogiri module method.  See the scraper method below:</p>

<pre><code class="ruby">def page_scraper
    @reading_list = [ ]
    @url_list.each do |url|
        html = open(url)
        doc = Nokogiri::HTML(html)
        titles = doc.css(".title &gt; a")
        score = nil
        comment_num = nil
        titles.each do |title_data|
            title = title_data.text[0..10]
            url = title_data.attribute("href").value
            subtexts = title_data.parent.parent.next.css(".subtext")
            subtexts.each do |subtext_line|
                score = subtext_line.css('.score').text.gsub(" points","").to_i
                comment_num = subtext_line.css('a').text.scan(/\d+ comments/).join.scan(/[0-9]+/).join.to_i
            end
          @reading_list &lt;&lt; {article_title: title, link: url, points: score, comments: comment_num}
      end
    end
  end
</code></pre>

<hr />

<p>Future improvements could include:<br/>
- Building out an interactive CLI app that allows for user engagement (e.g. &ldquo;how many pages would you like to parse?&rdquo;, &ldquo;Would you like to see the article with the most points/comments/both?&rdquo;, etc.).<br/>
- Investigating the use of Hacker News' API to allow for more robust information usage.<br/>
- Integrating other relevant news sites (e.g. top Reddit post, top io9 article, etc).</p>

<p>For the curious, you can find the repo here: <a href="https://github.com/skipsuva/must-read-hacker-news">Must Read Hacker News</a>.  Feedback and suggestions are welcome!</p>
]]></content>
  </entry>
  
</feed>
