<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: flatiron&nbsp;school | Skip_Skillset.push('Ruby')]]></title>
  <link href="http://skipsuva.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://skipsuva.github.io/"/>
  <updated>2015-12-11T09:02:12-05:00</updated>
  <id>http://skipsuva.github.io/</id>
  <author>
    <name><![CDATA[Skip Suva]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web Scraping & Hacker News]]></title>
    <link href="http://skipsuva.github.io/blog/2015/12/11/hacker-new-must-read/"/>
    <updated>2015-12-11T06:53:51-05:00</updated>
    <id>http://skipsuva.github.io/blog/2015/12/11/hacker-new-must-read</id>
    <content type="html"><![CDATA[<p>After covering basic web scraping in class, I thought it would be fun to get some additional practice scraping a live website and to create a simple, useful app with the result.  The premise is pretty straightforward, but offers a feature not easily gleaned from simply visiting the <a href="https://news.ycombinator.com/">Hacker News</a> website - the program compares <em>both</em> each article&rsquo;s Reddit-style point count with the quantity of comments.  After identifying that article, it launches the webpage automatically from the console.  See below for a repository link to &lsquo;Must Read Hacker News.&rsquo;</p>

<!-- more -->


<p>Utilizing the <a href="https://rubygems.org/gems/nokogiri/versions/1.6.7">Nokogiri gem</a>, I parse 4 pages of Hacker News, identifying the necessary css selectors and assigning to an array of hashes.  From there, it&rsquo;s a simple each loop in the &lsquo;calculator&rsquo; method to identify the one article with the highest point score and highest comment count.</p>

<p>The main challenge I ran into was identifying a way to navigate the structure of the website - articles on Hacker News are arranged in a non-nested table, meaning getting from title/link to point count and comments wasn&rsquo;t as easy as I had anticipated.  Shown below is a visualization of what I mean - the table row that holds the subtext is not nested in the title table row, instead it is just the next <tr>.</p>

<p><img align="clear" src="http://s12.postimg.org/7t4f9xg6l/Screen_Shot_2015_12_11_at_8_29_48_AM.png" width="500"/></p>

<p>I got some excellent pointers from <a href="www.example.com">Dave Flaherty</a> on how to do just that, utilizing the &lsquo;.parent&rsquo; Nokogiri module method.  See the scraper method below:</p>

<pre><code class="ruby">def page_scraper
    @reading_list = []
    @url_list.each do |url|
        html = open(url)
        doc = Nokogiri::HTML(html)
        titles = doc.css(".title &gt; a")
        score = nil
        comment_num = nil
        titles.each do |title_data|
            title = title_data.text[0..10]
            url = title_data.attribute("href").value
            subtexts = title_data.parent.parent.next.css(".subtext")
            subtexts.each do |subtext_line|
                score = subtext_line.css('.score').text.gsub(" points","").to_i
                comment_num = subtext_line.css('a').text.scan(/\d+ comments/).join.scan(/[0-9]+/).join.to_i
            end
          @reading_list &lt;&lt; {article_title: title, link: url, points: score, comments: comment_num}
      end
    end
  end
</code></pre>

<hr />

<p>Future improvements could include:<br/>
- Building out an interactive CLI app that allows for user engagement (e.g. &ldquo;how many pages would you like to parse?&rdquo;, &ldquo;Would you like to see the article with the most points/comments/both?&rdquo;, etc.).<br/>
- Investigating the use of Hacker News' API to allow for more robust information usage.<br/>
- Integrating other relevant news sites (e.g. top Reddit post, top io9 article, etc).</p>

<p>For the curious, you can find the repo here: <a href="https://github.com/skipsuva/must-read-hacker-news">Must Read Hacker News</a>.  Feedback and suggestions are welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Peek into the Black Magic that is RegEx]]></title>
    <link href="http://skipsuva.github.io/blog/2015/12/09/regex-black-magic/"/>
    <updated>2015-12-09T14:55:49-05:00</updated>
    <id>http://skipsuva.github.io/blog/2015/12/09/regex-black-magic</id>
    <content type="html"><![CDATA[<p>Interestingly enough, the first topic of my ruby blog isn&rsquo;t explicitly limited to the ruby language. Regular Expressions, or RegEx, are something I had seen used in ruby documentation and StackOverflow posts for months, but because its cryptic presentation felt so unapproachable to my young and impressionable eyes, I never investigated further.  Sure, I copied and pasted some examples to use for string substitutions, but I certainly didn&rsquo;t understand what on earth I was telling my method to actually do.  Since then, the tune of my song has changed - after a brief explanation by a classmate, I realized that RegEx is an extremely powerful and endlessly useful tool to  master, one that our instructor (only somewhat) jokingly compares to black magic.</p>

<!-- more -->


<h3><code>/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/</code></h3>

<p><em>A valid regular expression used to match a standard email address</em></p>

<p>In short, a regular expression is a sequence characters that can be used to describe a search pattern for text in a string.  Correct usage of RegEx can create powerful search parameters in a single line of code.  As such, there are a handful of common uses, from character replacement or subbing, list parsing and splitting, to ensuring proper text/user entry formatting in programs or web applications.</p>

<p>Regular expressions came about in the 1950s and were commonly used with Unix text processing.  Since then, they have been used by a bevy of other programming languages: C, C++, Perl, PHP, Java, .NET, Ruby, Python, etc.  While the specific uses of RegEx within each language may differ in use and implementation, my impression is that the core concepts are the same.</p>

<hr />

<p>This post is meant by <strong>no means</strong> to be a comprehensive tutorial - I merely want to provide a helpful jumping-off point for interested readers.  As such, I’ve provided a handful of helpful resources and RegEx practice environments linked below.  I do, however, want to also introduce a few basic selectors that, once understood, will help begin lifting the fog for a beginner.</p>

<hr />

<h3><code>/abc/</code> vs <code>/[abc]/</code></h3>

<p><img align="clear" src="http://s3.postimg.org/i4j5lf9kj/abc.png" width="250"/>
<img align="clear" src="http://s3.postimg.org/chmsny71v/abc_brack.png" width="246"/></p>

<p>The first example highlights basic RegEx selector syntax.  In the example above, we can see that surrounding text with brackets grants the ability to select any of the listed characters, rather than an explicit pattern.  Doing so, you are able to link together multiple character selectors.</p>

<h3><code>[a-z]</code></h3>

<p><img align="clear" src="http://s3.postimg.org/k6f1lxi5v/range.png" width="250"/></p>

<p>Utilizing this bracketing strategy, we&rsquo;re able to select characters that fall within a certain range regardless of positioning - this format also works for digits.</p>

<h3><code>/\d/</code> vs <code>/\D/</code>  &amp; <code>/\w/</code> vs <code>/\W/</code></h3>

<p><img align="clear" src="http://s3.postimg.org/7gfemkzlf/digits.png" width="250"/>
<img align="clear" src="http://s3.postimg.org/4wf6eqmnn/nondigits.png" width="250"/></p>

<p><img align="clear" src="http://s3.postimg.org/c8kmka4vn/alphanum.png" width="250"/>
<img align="clear" src="http://s3.postimg.org/3rl49d06r/nonalpha.png" width="250"/></p>

<p>In the first you see the <code>/\d/</code> and <code>/\D/</code> selectors which target digits and non-digits, respectively.  Next is the <code>/\w/</code>  which allows the targeting of <strong>all</strong> alphanumeric characters, and <code>/\W/</code> which targets non-alphanumeric characters.</p>

<h3><code>/[,\s.]/</code></h3>

<p><img align="clear" src="http://s3.postimg.org/hmjertulv/special.png" width="250"/></p>

<p>Here we are using specific special characters, specifically ‘,\s.’ which allows the selection of white spaces, commas and periods.  There are other special-symbol-specific selectors available as well.</p>

<hr />

<p>As you can likely imagine, the use of regular expressions could get pretty complex, and my understanding and usage of the topic has really only begun. As promised, you can find some excellent resources below to explore regular expressions further.</p>

<p><a href="http://regexone.com/">RegexOne</a>: Excellent interactive introductory tutorial on regular expressions.<br/>
<a href="http://regexr.com/">RegExr</a>: Useful tool to practice regular expressions with custom text.<br/>
<a href="http://rubular.com/">Rubular</a>: Another tool to practice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Initialize]]></title>
    <link href="http://skipsuva.github.io/blog/2015/12/09/first-post/"/>
    <updated>2015-12-09T14:48:39-05:00</updated>
    <id>http://skipsuva.github.io/blog/2015/12/09/first-post</id>
    <content type="html"><![CDATA[<p>Welcome to the technical Blog of Skip Suva.  Over (at least) the next three months, I will be adding posts periodically and writing about topics that interest, confuse, and frustrate me - with the hope that doing so will not only enlighten a reader or two, but also ensure I master that domain.</p>
]]></content>
  </entry>
  
</feed>
