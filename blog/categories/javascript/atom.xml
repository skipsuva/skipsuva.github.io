<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Skip_Skillset.push('Ruby')]]></title>
  <link href="http://skipsuva.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://skipsuva.github.io/"/>
  <updated>2016-03-08T12:49:43-05:00</updated>
  <id>http://skipsuva.github.io/</id>
  <author>
    <name><![CDATA[Skip Suva]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ember computed properties in practice]]></title>
    <link href="http://skipsuva.github.io/blog/2016/03/08/ember-computed-properties/"/>
    <updated>2016-03-08T10:56:38-05:00</updated>
    <id>http://skipsuva.github.io/blog/2016/03/08/ember-computed-properties</id>
    <content type="html"><![CDATA[<p>For me, our class' transition from Rails to Ember.js was an exciting one.  I felt as though it marked me taking one step closer to being a real developer - for the first time, harnessing the ultimate developer super-power of being able to transfer programmatic knowledge and thinking across languages and frameworks. This enthusiasm was bolstered after brief exploration - while the land looked quite different than that of ruby and rails&hellip;it felt familiar in an exhilarating way.  This optimism, coupled with the fact that the Ember mascot is an <a href="https://upload.wikimedia.org/wikipedia/en/6/69/Ember.js_Logo_and_Mascot.png">adorable hamster</a>&hellip;I mean, <em>come on.</em></p>

<!-- more -->


<p>In this post, I want to highlight one feature of Ember I think is really cool, computed properties, and show some use cases and code from a recent project I worked on.</p>

<p>What are computed values in Ember?  Let&rsquo;s look at the docs:</p>

<blockquote><p>In a nutshell, computed properties let you declare functions as properties. You create one by defining a computed property as a function, which Ember will automatically call when you ask for the property. You can then use it the same way you would any normal, static property.</p></blockquote>

<p>The code found in the docs highlight <a href="https://guides.emberjs.com/v2.4.0/object-model/computed-properties/">pretty simple executions</a>, defining a property of an object that combines other properties in some way (e.g. combining a first name and a last name).  Coming from ruby, this initially didn&rsquo;t seem that special - the easiest analog would be some sort of helper method defined in a class or view helper.  However, it wasn&rsquo;t until pretty far along in our Ember project, that the real value became clear to me and I was able to write some cool code.  More on that in a bit.</p>

<p>Here&rsquo;s another, slightly more complex example of computed property usage.  In this case, we want to be able to easily produce a list of the conferences that our Programmer object is the keynote speaker of:</p>

<pre><code class="javascript">// programmer.js
export default Ember.Object.extend({
  firstName: null,
  lastName: null,
  conferences: [ ],

  // simple example found in the Ember docs
  fullName: Ember.computed("firstName", "lastName", function( ){
      return `${this.get('firstName')} ${this.get('lastName')}`;
    }),

  // more complex example, utilizing the properties of a collection of conference objects
  keyNoteConferences: Ember.computed("conferences.@each.keyNote", function( ){
    let keyTalks = [ ];
    this.get('conferences').forEach(function(conf){
      if (conf.keyNote === this.get('fullName')) {
        keyTalks.pushObject(conf);
      }
    }.bind(this));
    return keyTalks;
  })
})
</code></pre>

<hr />

<p>In our Ember project, <a href="globo-api.herokuapp.com">Globo</a>, we needed the ability to dynamically access the &lsquo;pins&rsquo; of a user&rsquo;s trip.  Due to the associations of our models in Ember and the Rails API, this meant that we had to go through &lsquo;destinations,&rsquo; a join table of the &lsquo;trips&rsquo; and &lsquo;pins&rsquo; of the current user.  In a rails-only application, this would have been a walk in the park - a quick helper method in the &lsquo;trip&rsquo; class.  However, as we saw above, it&rsquo;s not that simple in Ember - because of the file structure (separation of models, routes, controllers, etc), the concept of &lsquo;this&rsquo; (or &lsquo;self&rsquo; in rails) is pretty dynamic depending on where you&rsquo;re calling it from.  See below for a screenshot of the outcome we were looking for, a poly-line (representing a &lsquo;trip&rsquo;) connecting multiple &lsquo;pins&rsquo;:</p>

<p><img align="clear" src="http://s29.postimg.org/iosgqz85z/Screen_Shot_2016_03_08_at_12_09_23_PM.png" width="650"/></p>

<p>In order to represent this connection, we needed to create a computed property for a trip, &lsquo;pinPoints,&rsquo; which would return an array of coordinates that our Leaflet map component could use for the poly-line.</p>

<pre><code class="javascript">// app/models/trip.js
export default DS.Model.extend({
name: DS.attr('string'),
web_color: DS.attr('string'),
startDate: DS.attr('date'),
user: DS.belongsTo('user'),
createdAt: DS.attr('date'),
destinations: DS.hasMany('destination'),

pinPoints: Ember.computed('destinations', function( ){
  let locationArray = [ ];
  this.get('destinations').forEach(function(destination){
    let pin = destination.get('pin');
    let coords = L.latLng(pin.get('lat'), pin.get('long'));
    locationArray.push(coords);
  });
  return locationArray;
}),
</code></pre>

<p>With this property established, we could then access it on the front end via handlebars to establish the poly-lines:</p>

<p><img align="clear" src="http://s24.postimg.org/h3z3o3uzp/Screen_Shot_2016_03_08_at_12_45_27_PM.png" width="500"/></p>

<p><strong>Resources:</strong></p>

<ul>
<li><a href="https://guides.emberjs.com/v2.4.0/object-model/computed-properties/">Ember Docs on Computed Properties</a> on the History API, pushState and popstate</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Week in Janky Javascript...]]></title>
    <link href="http://skipsuva.github.io/blog/2016/02/09/janky-dot-js/"/>
    <updated>2016-02-09T19:34:38-05:00</updated>
    <id>http://skipsuva.github.io/blog/2016/02/09/janky-dot-js</id>
    <content type="html"><![CDATA[<p>While working on our recent project, <a href="https://gettogethr.herokuapp.com">gettogethr</a>, our team saw a number of opportunities to make the user experience feel much quicker and more customizable.  Of course, in order to see these through, we knew we&rsquo;d need to call upon our new friend Javascript and her metal-armed brother (A)<a href="http://vignette2.wikia.nocookie.net/mortalkombat/images/2/2e/Jax_MK3_ver.png/revision/latest?cb=20110416103234&amp;path-prefix=ru">JAX</a>.</p>

<!-- more -->


<p><img src="http://i.imgur.com/VTLzZB1.gif" alt="" /></p>

<p>A la Google Docs, we wanted to provide the ability to change the title of a shared event on the fly, ensuring the name change persists in the database and upon page reload.</p>

<p>The first step to achieve this effect was to build a jQuery double-click listener on the title element which is initiated upon page load.  When activated, a text box input is created with some attributes (in order to show the old/exisiting title) and replaces the title html element on the page.</p>

<pre><code class="javascript">Gathering.prototype.addTitleListener = function( ) {
  this.$gatheringTitle.dblclick(function( ) {
    var oldTitle = this.$gatheringTitle.text( );
    var textbox = document.createElement('input');
    textbox.type = 'text';
    textbox.id = 'title';
    textbox.value = oldTitle;
    this.$gatheringTitle.html(textbox);
    $('#title').on('keypress', titleKeypressListener.bind(this) );
  }.bind(this) );
};
</code></pre>

<p>Next, we assign a jQuery listener to the keypresses on that newly created input box (&lsquo;#title&rsquo;).  When the <a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">enter key is hit</a> (e.keyCode === 13), the current value of the text box and the id of the current event (captured via an identifying id) are assigned to variables to be used in an AJAX call to our gatherings controller.</p>

<pre><code class="javascript">var titleKeypressListener = function(e) {
  if(e.keyCode === 13) {
    var title = $('#title').val( );
    var URL =  this.gatheringId;
    $.ajax({
      method: 'patch',
      url: URL,
      dataType: 'script',
      data: {
        gathering: {
          id: this.gatheringId,
          title: title
        }},
      success: function( ){
        this.$gatheringTitle.html($('#title').val( ));
      }.bind(this)
    });
  }
};
</code></pre>

<p>This AJAX call sends the newly entered title, via patch request, to our controller.  There, we identify the correct gathering via the established params, and update the object with our new title (gathering_params).  Finally, upon success, we replace the text input element with the new title.</p>

<pre><code class="ruby">def update
  @gathering = Gathering.find(params [ :id ] )
  respond_to do | format |
    if @gathering.update(gathering_params)
        ....
      format.js { head 204 }
        ....
    end
  end
end
</code></pre>

<p>From here, we could changing the title as many times as you want because the double click listener is still active.</p>

<p><strong>Resources:</strong></p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode">Mozilla Developer Network</a> on (deprecated) use of keyCodes</li>
<li><a href="https://jquery.com/">jQuery Documentation</a> for all the things</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time Traveling & Finding a Use for .pushState( )]]></title>
    <link href="http://skipsuva.github.io/blog/2016/01/26/history-and-pushstate/"/>
    <updated>2016-01-26T09:37:57-05:00</updated>
    <id>http://skipsuva.github.io/blog/2016/01/26/history-and-pushstate</id>
    <content type="html"><![CDATA[<p>When you type &ldquo;this&rdquo; into your browser&rsquo;s javascript console, you&rsquo;re returned an object:</p>

<p><code>Window {external: Object, chrome: Object, document: document, GoogleAnalyticsObject: "ga", waffle: Object…}</code></p>

<p>While debugging your code, seeing this object could cause frustration (and likely has at some point) - you may have forgotten to bind &ldquo;this&rdquo; to the function in question or something along those lines.  In this context, the appearance of a wild &ldquo;Window&rdquo; is nothing more than a sign that you&rsquo;ve done something wrong.</p>

<!-- more -->


<p>Up until this point, I&rsquo;ve not interacted with this &ldquo;Window&rdquo; object in any formal capacity - brief investigations reveal that it holds a bunch of information pertaining to the browser, screen size, and a torrent of other unknown attributes.  It wasn&rsquo;t until a googling rabbit hole stemming from Turbolinks lead me to the javascript &ldquo;pushState&rdquo; method that I learned how interactions with the &ldquo;Window&rdquo; can be incorporated into code to have a web app do cool things. This post will primarily focus on interacting with the &ldquo;history&rdquo; attribute, however I&rsquo;m certain that many of the others are as useful and interesting.</p>

<p>The &ldquo;history&rdquo; object (accessible via <code>window.history</code> in your browser console), in short, provides an interface for manipulating the browser&rsquo;s session history.  The most simple examples of this manipulation are via the <code>window.history.forward( )</code>, <code>window.history.back( )</code> and <code>window.history.go(-3)</code> methods, allowing you to navigate the browser forward and back through the pages in the user&rsquo;s session history, as well as target a specific location.</p>

<p>Digging further, we find <code>.pushState()</code> and <code>.replaceState()</code>, which allow you to add and modify history entries.  From <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">MDN</a>:</p>

<blockquote><p>Using <code>history.pushState( )</code> changes the referrer that gets used in the >HTTP header for XMLHttpRequest objects created after you change the >state. The referrer will be the URL of the document whose window is >this at the time of creation of the XMLHttpRequest object."</p></blockquote>

<p>A simple way to see this in action is to enter the following into your developer console:</p>

<pre><code class="javascript">var stateObj = { foo: "bar" };
history.pushState(stateObj, "", "bar.html");
</code></pre>

<p>Woah - the url changed but you didn&rsquo;t go anywhere.  Now check your browser history - it added this phantom page url as well.  This is cool, but how could this be useful?  A use case could involve leveraging jQuery to fetch and load page templates while having .pushState( ) feign page changes, resulting in a much faster user experience than typical full-page reload.  This strategy would really only be effective on applications that share a layout (for header/footer/styling) across many pages.</p>

<p>Using a very, very simple multi-page app example, we could use the following code snippet (drawn from a post by <a href="https://rosspenman.com/pushstate-jquery/">Ross Penman</a>) to execute what was outlined above:</p>

<pre><code class="javascript">$(function( ) {
  var $main = $("main");

  $('a').on("click", function( ) {
    var href = $(this).attr("href");

    history.pushState({ }, '', href);

    $main.load(href + " main");
    return false;
  });
});
</code></pre>

<p>As discussed, the result of incorporating this code is the illusion that our page is reloading at blazing speeds, when in reality we&rsquo;re only pulling and rendering the <code>&lt;main&gt;&lt;/main&gt;</code> content from each page clicked with the &ldquo;.load( )&rdquo; jQuery method.</p>

<p><img src="https://media.giphy.com/media/l0NwsWzFCZqNs6f5u/giphy.gif" alt="" /></p>

<p>There&rsquo;s an issue with this code though - while we get the initial effect we wanted, the user isn&rsquo;t able to use the back button.  In order to do that, we&rsquo;d need to utilize AJAX and check the &ldquo;popstate&rdquo; of the page - a window event that is updated whenever the active history entry changes (in this case, right before .pushState( ) is called).  The full code for this functionality can be found on <a href="https://rosspenman.com/pushstate-jquery/">Ross Penman&rsquo;s illustrative post</a>, with some great explanation of the methodology.</p>

<p>I still have a lot to learn about this topic, as well as a lot of questions - for example, how incorporating the use of .pushState( ) into an app would affect cross-browser performance.</p>

<p><strong>Resources:</strong></p>

<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate">Mozilla Developer Network</a> on the History API, pushState and popstate</li>
<li><a href="https://rosspenman.com/pushstate-jquery/">Ross Penman</a> on jQuery and pushState</li>
<li><a href="http://blog.honeybadger.io/ditching-your-single-page-app-for-turbolinks/">Honeybadger</a> on Turbolinks</li>
</ul>

]]></content>
  </entry>
  
</feed>
